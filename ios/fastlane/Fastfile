# ios/fastlane/Fastfile - Updated with API key object fix
default_platform(:ios)

platform :ios do
  
  before_all do
    setup_circle_ci if ENV['CI']
    ensure_bundle_exec
    auto_update_version if ENV['GITHUB_RUN_NUMBER']
  end

  # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°: Auto version management
  private_lane :auto_update_version do
    begin
      # ‡∏î‡∏∂‡∏á version ‡∏à‡∏≤‡∏Å package.json
      package_json_path = File.expand_path('../../package.json')
      if File.exist?(package_json_path)
        package_json = JSON.parse(File.read(package_json_path))
        new_version = package_json['version']
      else
        UI.error("package.json not found, using default version")
        new_version = "1.0.0"
      end
      
      # ‡πÉ‡∏ä‡πâ GitHub run number ‡πÄ‡∏õ‡πá‡∏ô build number
      build_number = ENV['GITHUB_RUN_NUMBER'] || "1"
      branch = ENV['GITHUB_REF_NAME'] || 'develop'
      
      # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó iOS version
      increment_version_number(
        version_number: new_version,
        xcodeproj: "TestCICD.xcodeproj"
      )
      
      increment_build_number(
        build_number: build_number,
        xcodeproj: "TestCICD.xcodeproj"
      )
      
      UI.success("‚úÖ Auto updated iOS version:")
      UI.success("   CFBundleShortVersionString: #{new_version}")
      UI.success("   CFBundleVersion: #{build_number}")
      UI.success("   branch: #{branch}")
      
    rescue => e
      UI.error("‚ùå Failed to auto update version: #{e.message}")
      UI.error("Continuing with existing version...")
    end
  end

  # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°: Manual version management
  lane :set_version do |options|
    version = options[:version] || prompt(text: "Enter version (e.g., 1.2.3):")
    build = options[:build] || prompt(text: "Enter build number (e.g., 123):")
    
    increment_version_number(
      version_number: version,
      xcodeproj: "TestCICD.xcodeproj"
    )
    
    increment_build_number(
      build_number: build,
      xcodeproj: "TestCICD.xcodeproj"
    )
    
    UI.success("‚úÖ Manually set iOS version:")
    UI.success("   CFBundleShortVersionString: #{version}")
    UI.success("   CFBundleVersion: #{build}")
  end

  lane :bump_version do |options|
    type = options[:type] || "patch"
    
    # ‡∏≠‡πà‡∏≤‡∏ô version ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_version = get_version_number(xcodeproj: "TestCICD.xcodeproj")
    current_build = get_build_number(xcodeproj: "TestCICD.xcodeproj").to_i
    
    # Parse semantic version
    version_parts = current_version.split('.').map(&:to_i)
    
    case type
    when "major"
      version_parts[0] += 1
      version_parts[1] = 0
      version_parts[2] = 0
    when "minor"
      version_parts[1] += 1
      version_parts[2] = 0
    when "patch"
      version_parts[2] += 1
    end
    
    new_version = version_parts.join('.')
    new_build = current_build + 1
    
    increment_version_number(
      version_number: new_version,
      xcodeproj: "TestCICD.xcodeproj"
    )
    
    increment_build_number(
      build_number: new_build.to_s,
      xcodeproj: "TestCICD.xcodeproj"
    )
    
    UI.success("‚úÖ Bumped #{type} version:")
    UI.success("   #{current_version} -> #{new_version}")
    UI.success("   build: #{current_build} -> #{new_build}")
  end

  # üöÄ Deployment lanes (‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
  lane :deploy_develop do
    UI.message("üöÄ Deploying to TestFlight Internal...")
    build_and_deploy(
      groups: ["Internal Testers", "Developers"],
      skip_waiting: true
    )
    # notify_slack("üöÄ iOS Development build uploaded to TestFlight Internal!")
  end

  lane :deploy_preprod do
    UI.message("üöÄ Deploying to TestFlight Beta...")
    build_and_deploy(
      groups: ["Beta Testers", "QA Team"],
      skip_waiting: false
    )
    # notify_slack("üöÄ iOS Pre-production build uploaded to TestFlight Beta!")
  end

  # üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: deploy_master ‡πÉ‡∏ä‡πâ API key object
  lane :deploy_master do
    UI.message("üéâ Deploying to App Store...")
    setup_certificates
    build_release_app
    
    upload_options = {
      force: true,
      submit_for_review: false,
      automatic_release: false,
      skip_metadata: true,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false
    }
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ API key object ‡πÅ‡∏ó‡∏ô path
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    api_issuer_id = ENV['APP_STORE_CONNECT_API_ISSUER_ID']
    api_key_content_base64 = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    if api_key_id && api_issuer_id && api_key_content_base64
      begin
        require 'base64'
        api_key_content = Base64.decode64(api_key_content_base64)
        
        UI.message("‚úÖ Creating App Store Connect API configuration for App Store")
        UI.message("   Key ID: #{api_key_id}")
        UI.message("   Issuer ID: #{api_issuer_id}")
        
        app_store_connect_api_key = {
          key_id: api_key_id,
          issuer_id: api_issuer_id,
          key: api_key_content,
          duration: 1200,
          in_house: false
        }
        
        upload_options[:api_key] = app_store_connect_api_key
        UI.success("‚úÖ Using API key for App Store upload")
      rescue => e
        UI.error("‚ùå API key setup failed: #{e.message}")
        UI.message("‚ö†Ô∏è Falling back to traditional auth")
      end
    else
      UI.message("‚ö†Ô∏è API key not available for App Store upload, using traditional auth")
    end
    
    upload_to_app_store(upload_options)
    # notify_slack("üéâ iOS Production build uploaded to App Store Connect!")
  end

  lane :build_only do
    UI.message("üî® Building iOS app...")
    setup_certificates
    build_release_app
    UI.success("‚úÖ iOS build completed successfully!")
  end

  lane :submit_for_review do
    UI.message("üìã Submitting for App Store review...")
    
    upload_options = {
      skip_binary_upload: true,
      submit_for_review: true,
      automatic_release: false,
      force: true,
      submission_information: submission_info
    }
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ API key object ‡πÅ‡∏ó‡∏ô path
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    api_issuer_id = ENV['APP_STORE_CONNECT_API_ISSUER_ID']
    api_key_content_base64 = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    if api_key_id && api_issuer_id && api_key_content_base64
      begin
        require 'base64'
        api_key_content = Base64.decode64(api_key_content_base64)
        
        app_store_connect_api_key = {
          key_id: api_key_id,
          issuer_id: api_issuer_id,
          key: api_key_content,
          duration: 1200,
          in_house: false
        }
        
        upload_options[:api_key] = app_store_connect_api_key
        UI.success("‚úÖ Using API key for App Store review submission")
      rescue => e
        UI.error("‚ùå API key setup failed: #{e.message}")
      end
    end
    
    upload_to_app_store(upload_options)
    # notify_slack("üìã iOS app submitted for App Store review!")
  end

  # üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: setup_certificates ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ API key path ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß
  private_lane :setup_certificates do
    UI.message("üîê Setting up certificates...")
    
    # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà Match ‡∏Å‡∏±‡∏ö traditional auth
    match(
      type: "appstore",
      readonly: true
    )
    
    UI.success("‚úÖ Certificates setup completed")
  end

  private_lane :build_release_app do
    build_app(
      scheme: "TestCICD",
      workspace: "TestCICD.xcworkspace",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      output_directory: "./build",
      output_name: "TestCICD.ipa",
      include_bitcode: false,
      export_options: {
        provisioningProfiles: {
          "test.cicd.appibc" => "match AppStore test.cicd.appibc"
        }
      }
    )
  end

  # üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: build_and_deploy ‡πÉ‡∏ä‡πâ API key object
  private_lane :build_and_deploy do |options|
    setup_certificates
    build_release_app
    
    upload_options = {
      skip_waiting_for_build_processing: options[:skip_waiting],
      groups: options[:groups],
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Automated build from #{ENV['GITHUB_REF_NAME']} branch"
    }
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ API key content ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ó‡∏ô path
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    api_issuer_id = ENV['APP_STORE_CONNECT_API_ISSUER_ID']
    api_key_content_base64 = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    if api_key_id && api_issuer_id && api_key_content_base64
      begin
        # Decode API key content
        require 'base64'
        api_key_content = Base64.decode64(api_key_content_base64)
        
        UI.message("‚úÖ Creating App Store Connect API configuration for TestFlight")
        UI.message("   Key ID: #{api_key_id}")
        UI.message("   Issuer ID: #{api_issuer_id}")
        UI.message("   Content length: #{api_key_content.length} characters")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á App Store Connect API object
        app_store_connect_api_key = {
          key_id: api_key_id,
          issuer_id: api_issuer_id,
          key: api_key_content,
          duration: 1200, # 20 minutes
          in_house: false
        }
        
        upload_options[:api_key] = app_store_connect_api_key
        UI.success("‚úÖ Using App Store Connect API for TestFlight upload")
        
      rescue => e
        UI.error("‚ùå Failed to setup API key: #{e.message}")
        UI.error("   Error class: #{e.class}")
        UI.message("‚ö†Ô∏è Falling back to traditional auth")
      end
    else
      UI.message("‚ö†Ô∏è API key not available, using traditional auth")
      missing_items = []
      missing_items << "API_KEY_ID" unless api_key_id
      missing_items << "ISSUER_ID" unless api_issuer_id  
      missing_items << "KEY_CONTENT" unless api_key_content_base64
      UI.message("Missing: #{missing_items.join(', ')}")
    end
    
    upload_to_testflight(upload_options)
  end

  private_lane :submission_info do
    {
      add_id_info_limits_tracking: true,
      add_id_info_serves_ads: false,
      add_id_info_tracks_action: true,
      add_id_info_tracks_install: true,
      add_id_info_uses_idfa: true,
      content_rights_has_rights: true,
      content_rights_contains_third_party_content: true,
      export_compliance_platform: 'ios',
      export_compliance_compliance_required: false,
      export_compliance_encryption_updated: false,
      export_compliance_uses_encryption: false,
      export_compliance_is_exempt: false,
      export_compliance_contains_third_party_cryptography: false,
      export_compliance_contains_proprietary_cryptography: false,
      export_compliance_available_on_french_store: false
    }
  end

  private_lane :notify_slack do |message|
    return unless ENV["SLACK_URL"]
    
    begin
      slack(
        message: message,
        channel: "#releases",
        webhook_url: ENV["SLACK_URL"],
        username: "iOS CI/CD",
        icon_emoji: ":apple:"
      )
    rescue => e
      UI.error("Failed to send Slack notification: #{e.message}")
    end
  end

  # Error handling
  error do |lane, exception|
    error_message = "‚ùå iOS deployment failed in lane '#{lane}': #{exception.message}"
    UI.error(error_message)
    # notify_slack(error_message) if defined?(notify_slack)
    raise exception
  end
end