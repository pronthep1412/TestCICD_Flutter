# ios/fastlane/Fastfile - iOS Fastlane Configuration
default_platform(:ios)

platform :ios do
  before_all do
    setup_ci if ENV['CI']
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
      key_filepath: ENV['APP_STORE_CONNECT_API_KEY_PATH']
    ) if ENV['APP_STORE_CONNECT_API_KEY_ID']
  end

  desc "Build iOS app without deploying"
  lane :build_only do
    # Setup certificates and provisioning profiles
    match(
      type: "appstore",
      readonly: true,
      git_url: ENV['MATCH_GIT_URL'],
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    )
    
    # Build Flutter iOS
    sh("cd .. && flutter build ios --release --no-codesign")
    
    # Build and archive with Xcode
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      output_directory: "build",
      output_name: "Runner.ipa"
    )
    
    UI.success("‚úÖ iOS build completed successfully!")
  end

  desc "Deploy to App Store Connect"
  lane :deploy do |options|
    target = options[:target] || "testflight_internal"
    version = options[:version] || "1.0.0"
    build_number = options[:build_number] || "1"
    
    UI.message("üçé Building and deploying iOS - Target: #{target}")
    UI.message("üìã Version: #{version} (#{build_number})")
    
    # Setup certificates
    match(
      type: "appstore",
      readonly: true,
      git_url: ENV['MATCH_GIT_URL'],
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    )
    
    # Update version numbers
    increment_version_number(version_number: version)
    increment_build_number(build_number: build_number)
    
    # Build Flutter iOS
    sh("cd .. && flutter build ios --release --no-codesign --build-name=#{version} --build-number=#{build_number}")
    
    # Build and archive
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      output_directory: "build",
      output_name: "Runner.ipa"
    )
    
    # Deploy based on target
    case target
    when "app_store"
      UI.message("üì§ Uploading to App Store...")
      upload_to_app_store(
        ipa: "build/Runner.ipa",
        skip_metadata: true,
        skip_screenshots: true,
        submit_for_review: false
      )
    when "testflight_beta"
      UI.message("üì§ Uploading to TestFlight (Beta)...")
      upload_to_testflight(
        ipa: "build/Runner.ipa",
        groups: ["Beta Testers"],
        notify_external_testers: true
      )
    when "testflight_internal"
      UI.message("üì§ Uploading to TestFlight (Internal)...")
      upload_to_testflight(
        ipa: "build/Runner.ipa",
        distribute_external: false,
        notify_external_testers: false
      )
    else
      UI.user_error!("Unknown target: #{target}")
    end
    
    UI.success("‚úÖ Successfully deployed to #{target}!")
  end
  
  desc "Deploy to specific branch target"
  lane :deploy_main do
    deploy(target: "app_store")
  end
  
  lane :deploy_staging do
    deploy(target: "testflight_beta")
  end
  
  lane :deploy_develop do
    deploy(target: "testflight_internal")
  end
end