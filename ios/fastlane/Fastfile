# ios/fastlane/Fastfile - Static iOS Fastlane Configuration
default_platform(:ios)

platform :ios do
  
  before_all do
    setup_ci if ENV['CI']
    ensure_bundle_exec
  end

  desc "Deploy to TestFlight"
  lane :deploy do |options|
    UI.message("üöÄ Deploying Flutter iOS to TestFlight...")
    
    # Setup certificates with API key
    api_key = create_api_key_object
    setup_certificates_with_api_key(api_key)
    
    # Build app
    build_flutter_app
    
    # Upload to TestFlight with same API key
    upload_to_testflight_with_api_key(
      api_key: api_key,
      groups: ["Internal Testers"],
      skip_waiting: true
    )
    
    UI.success("üéâ Successfully deployed to TestFlight!")
  end

  desc "Build only"
  lane :build do
    UI.message("üî® Building Flutter iOS app...")
    
    # Setup certificates with API key
    api_key = create_api_key_object
    setup_certificates_with_api_key(api_key)
    
    # Build app
    build_flutter_app
    
    UI.success("‚úÖ Flutter iOS build completed!")
  end

  # üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á API key object (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
  private_lane :create_api_key_object do
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    api_issuer_id = ENV['APP_STORE_CONNECT_API_ISSUER_ID']
    api_key_raw_content = ENV['APP_STORE_CONNECT_API_KEY']
    
    if api_key_id && api_issuer_id && api_key_raw_content
      begin
        UI.message("‚úÖ Creating App Store Connect API configuration")
        UI.message("   Key ID: #{api_key_id}")
        UI.message("   Issuer ID: #{api_issuer_id}")
        UI.message("   Content length: #{api_key_raw_content.length} characters")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á API key object (structure ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô React Native)
        {
          key_id: api_key_id,
          issuer_id: api_issuer_id,
          key: api_key_raw_content,  # ‡πÉ‡∏ä‡πâ "key" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "key_content"
          duration: 1200,
          in_house: false
        }
        
      rescue => e
        UI.error("‚ùå Failed to setup API key: #{e.message}")
        nil
      end
    else
      UI.message("‚ö†Ô∏è API key not available, will use traditional auth")
      missing_items = []
      missing_items << "API_KEY_ID" unless api_key_id
      missing_items << "ISSUER_ID" unless api_issuer_id  
      missing_items << "KEY_CONTENT" unless api_key_raw_content
      UI.message("Missing: #{missing_items.join(', ')}")
      nil
    end
  end

  # üîê Setup certificates with API key
  private_lane :setup_certificates_with_api_key do |api_key|
    UI.message("üîê Setting up certificates...")
    
    if api_key
      match(
        type: "appstore",
        readonly: false,
        api_key: api_key  # ‚úÖ ‡∏™‡πà‡∏á API key object
      )
    else
      # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API key ‡πÉ‡∏ä‡πâ traditional auth
      match(
        type: "appstore",
        readonly: false
      )
    end
    
    UI.success("‚úÖ Certificates setup completed")
  end

  # üî® Build Flutter app
  private_lane :build_flutter_app do
    # Build Flutter app first
    sh("cd ../.. && flutter build ios --release --no-codesign")
    
    # Then build with Xcode
    build_app(
      scheme: "Runner",
      workspace: "Runner.xcworkspace", 
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      output_directory: "./build",
      output_name: "Runner.ipa",
      include_bitcode: false,
      export_options: {
        provisioningProfiles: {
          ENV['APP_BUNDLE_ID'] || "test.cicd.appibc" => "match AppStore #{ENV['APP_BUNDLE_ID'] || 'test.cicd.appibc'}"
        }
      }
    )
  end

  # üöÄ Upload with API Key Object
  private_lane :upload_to_testflight_with_api_key do |options|
    api_key = options[:api_key]
    
    upload_options = {
      skip_waiting_for_build_processing: options[:skip_waiting] || true,
      groups: options[:groups] || ["Internal Testers"],
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Automated Flutter build from #{ENV['GITHUB_REF_NAME'] || 'main'} branch"
    }
    
    # ‡πÉ‡∏ä‡πâ API key ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if api_key
      upload_options[:api_key] = api_key
      UI.success("‚úÖ Using App Store Connect API for TestFlight upload")
    else
      UI.message("‚ö†Ô∏è Using traditional auth for TestFlight upload")
    end
    
    upload_to_testflight(upload_options)
  end

  # Error handling
  error do |lane, exception|
    error_message = "‚ùå Flutter iOS deployment failed in lane '#{lane}': #{exception.message}"
    UI.error(error_message)
    raise exception
  end
end