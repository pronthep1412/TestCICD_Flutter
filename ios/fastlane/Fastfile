# ios/fastlane/Fastfile - Fixed API key file path issue
default_platform(:ios)

platform :ios do
  before_all do
    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
    setup_ci if ENV['CI']
  end

  desc "Deploy to App Store Connect"
  lane :deploy do |options|
    target = options[:target] || "testflight_internal"
    version = options[:version] || "1.0.0"
    build_number = options[:build_number] || "1"
    
    UI.message("üçé Building and deploying iOS")
    UI.message("üéØ Target: #{target}")
    UI.message("üìã Version: #{version} (#{build_number})")
    
    # üîß Setup certificates and provisioning profiles with Match + API Key
    setup_certificates_with_api_key
    
    # Update version numbers
    increment_version_number(version_number: version)
    increment_build_number(build_number: build_number)
    
    # Build Flutter iOS (without codesign - Fastlane will handle it)
    sh("cd .. && flutter build ios --release --no-codesign --build-name=#{version} --build-number=#{build_number}")
    
    # Build and archive with Xcode
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      output_directory: "build",
      output_name: "Runner.ipa",
      silent: false  # Keep verbose for debugging
    )
    
    # üîç IPA VALIDATION (FIXED PATH)
    validate_ipa_build
    
    # Deploy based on target
    case target
    when "app_store"
      deploy_to_app_store
    when "testflight_beta"
      deploy_to_testflight_beta
    when "testflight_internal"
      deploy_to_testflight_internal
    else
      UI.user_error!("‚ùå Unknown target: #{target}")
    end
    
    UI.success("‚úÖ Successfully deployed to #{target}!")
  end
  
  # üîç FIXED: IPA Validation with correct path
  private_lane :validate_ipa_build do
    # üîß FIXED: Use full path from Lane Context
    ipa_path = lane_context[SharedValues::IPA_OUTPUT_PATH] || "build/Runner.ipa"
    
    UI.header("üîç IPA BUILD VALIDATION")
    UI.message("üì¶ Checking IPA at: #{ipa_path}")
    
    unless File.exist?(ipa_path)
      # üîç Debug: Show what files actually exist
      UI.message("üîç Debug - Files in build directory:")
      if Dir.exist?("build")
        Dir.glob("build/*").each { |f| UI.message("   #{f}") }
      end
      
      # üîç Try alternative paths
      alternative_paths = [
        "../build/Runner.ipa",
        "build/Runner.ipa", 
        "./build/Runner.ipa"
      ]
      
      found_path = alternative_paths.find { |path| File.exist?(path) }
      
      if found_path
        UI.message("‚úÖ Found IPA at alternative path: #{found_path}")
        ipa_path = found_path
      else
        UI.user_error!("‚ùå IPA file not found. Checked paths: #{[ipa_path] + alternative_paths}")
      end
    end
    
    # File size check
    ipa_size = (File.size(ipa_path) / 1024.0 / 1024.0).round(2)
    UI.message("üì¶ IPA Size: #{ipa_size} MB")
    
    # Basic validation
    if File.size(ipa_path) > 10 * 1024 * 1024  # > 10MB
      UI.success("‚úÖ IPA size looks reasonable (#{ipa_size} MB)")
    else
      UI.error("‚ö†Ô∏è IPA size seems small (#{ipa_size} MB) - might be incomplete")
    end
    
    # Quick zip test
    begin
      result = sh("unzip -t '#{ipa_path}' >/dev/null 2>&1 && echo 'VALID' || echo 'INVALID'", log: false).strip
      if result == "VALID"
        UI.success("‚úÖ IPA zip structure is valid")
      else
        UI.error("‚ùå IPA zip structure is corrupted")
      end
    rescue => e
      UI.message("‚ö†Ô∏è Could not validate IPA structure: #{e.message}")
    end
    
    UI.success("üîç IPA validation completed")
  end
  
  # üîß FIXED: Create API key file for altool compatibility
  private_lane :create_api_key_object do
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    api_issuer_id = ENV['APP_STORE_CONNECT_API_ISSUER_ID']
    api_key_content_base64 = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    UI.header("üîë APP STORE CONNECT API KEY SETUP")
    
    # üîç LOG API KEY STATUS
    UI.message("üìã API Key Configuration:")
    UI.message("   Key ID: #{api_key_id ? "#{api_key_id[0..7]}..." : '‚ùå Missing'}")
    UI.message("   Issuer ID: #{api_issuer_id ? "#{api_issuer_id[0..7]}..." : '‚ùå Missing'}")
    UI.message("   Key Content: #{api_key_content_base64 ? "‚úÖ Available (#{api_key_content_base64.length} chars)" : '‚ùå Missing'}")
    
    if api_key_id && api_issuer_id && api_key_content_base64
      begin
        require 'base64'
        
        # üîç VALIDATE BASE64 CONTENT
        UI.message("üîç Validating API key content...")
        
        api_key_content = Base64.decode64(api_key_content_base64)
        UI.message("   Decoded length: #{api_key_content.length} characters")
        
        # Check if it looks like a valid P8 key
        if api_key_content.include?("BEGIN PRIVATE KEY") && api_key_content.include?("END PRIVATE KEY")
          UI.success("‚úÖ API key content appears to be valid P8 format")
        else
          UI.error("‚ùå API key content doesn't appear to be valid P8 format")
          UI.message("   First 50 chars: #{api_key_content[0..49]}")
        end
        
        UI.message("‚úÖ Creating App Store Connect API configuration")
        
        # üîß FIXED: Create both API object AND file for altool compatibility
        
        # 1. Create API object for Fastlane actions
        app_store_connect_api_key = {
          key_id: api_key_id,
          issuer_id: api_issuer_id,
          key: api_key_content,
          duration: 1200,
          in_house: false
        }
        
        # 2. üîß NEW: Create API key file for altool compatibility
        api_key_dir = File.expand_path("./private_keys")
        Dir.mkdir(api_key_dir) unless Dir.exist?(api_key_dir)
        
        api_key_file = "#{api_key_dir}/AuthKey_#{api_key_id}.p8"
        File.write(api_key_file, api_key_content)
        
        UI.message("‚úÖ Created API key file: #{api_key_file}")
        
        # 3. Set environment for altool
        ENV['API_PRIVATE_KEYS_DIR'] = api_key_dir
        
        UI.success("‚úÖ App Store Connect API key object and file created successfully")
        app_store_connect_api_key
        
      rescue => e
        UI.error("‚ùå Failed to create API key object: #{e.message}")
        UI.error("   Error class: #{e.class}")
        UI.message("‚ö†Ô∏è Will use traditional auth")
        nil
      end
    else
      UI.error("‚ö†Ô∏è API key not available, using traditional auth")
      missing_items = []
      missing_items << "API_KEY_ID" unless api_key_id
      missing_items << "ISSUER_ID" unless api_issuer_id  
      missing_items << "KEY_CONTENT" unless api_key_content_base64
      UI.message("Missing: #{missing_items.join(', ')}")
      nil
    end
  end
  
  # üîß Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setup certificates ‡∏û‡∏£‡πâ‡∏≠‡∏° API key
  private_lane :setup_certificates_with_api_key do |options|
    readonly_mode = options[:readonly] || true
    cert_type = options[:type] || "appstore"
    
    UI.header("üîê CERTIFICATES & PROVISIONING SETUP")
    UI.message("   Type: #{cert_type}")
    UI.message("   Readonly: #{readonly_mode}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á match options
    match_options = {
      type: cert_type,
      readonly: readonly_mode,
      verbose: true
    }
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° API key ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    api_key_object = create_api_key_object
    if api_key_object
      match_options[:api_key] = api_key_object
      UI.success("‚úÖ Using App Store Connect API for Match authentication")
    else
      UI.message("‚ö†Ô∏è Using traditional auth for Match (requires FASTLANE_PASSWORD)")
    end
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ match
    begin
      match(match_options)
      UI.success("‚úÖ Certificates setup completed!")
    rescue => e
      UI.error("‚ùå Match failed: #{e.message}")
      raise e
    end
  end
  
  # üîß FIXED: TestFlight upload with enhanced error handling
  private_lane :deploy_to_testflight_internal do
    UI.header("üîí TESTFLIGHT INTERNAL UPLOAD")
    
    # üîç PRE-UPLOAD CHECKS - Use Lane Context path
    ipa_path = lane_context[SharedValues::IPA_OUTPUT_PATH]
    
    unless ipa_path && File.exist?(ipa_path)
      # Fallback to common paths
      possible_paths = ["build/Runner.ipa", "../build/Runner.ipa"]
      ipa_path = possible_paths.find { |p| File.exist?(p) }
      
      unless ipa_path
        UI.user_error!("‚ùå IPA file not found in expected locations")
      end
    end
    
    UI.message("üì¶ IPA file: #{ipa_path}")
    UI.message("üì¶ IPA size: #{(File.size(ipa_path) / 1024.0 / 1024.0).round(2)} MB")
    
    upload_options = {
      ipa: ipa_path,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Internal testing build - #{Time.now.strftime('%Y-%m-%d %H:%M')}",
      skip_waiting_for_build_processing: true,
      skip_submission: true
    }
    
    # üîß CRITICAL: Ensure API key file exists for altool
    api_key_object = create_api_key_object
    if api_key_object
      upload_options[:api_key] = api_key_object
      UI.success("‚úÖ Using App Store Connect API for TestFlight Internal upload")
      
      # üîç Verify API key file exists for altool
      api_key_file = "./private_keys/AuthKey_#{api_key_object[:key_id]}.p8"
      if File.exist?(api_key_file)
        UI.success("‚úÖ API key file exists for altool: #{api_key_file}")
      else
        UI.error("‚ùå API key file missing for altool: #{api_key_file}")
      end
      
    else
      UI.message("‚ö†Ô∏è Using traditional auth for TestFlight Internal upload")
    end
    
    # üîç ENHANCED UPLOAD WITH ERROR HANDLING
    begin
      UI.message("üöÄ Starting upload to TestFlight...")
      UI.message("‚è±Ô∏è Upload started at: #{Time.now}")
      
      upload_to_testflight(upload_options)
      
      UI.success("‚úÖ Upload completed successfully!")
      UI.message("‚è±Ô∏è Upload finished at: #{Time.now}")
      
    rescue => upload_error
      UI.header("‚ùå TESTFLIGHT UPLOAD FAILED")
      UI.error("Error: #{upload_error.message}")
      UI.error("Class: #{upload_error.class}")
      
      # üîç ENHANCED ERROR ANALYSIS
      error_message = upload_error.message.downcase
      
      if error_message.include?("authkey") || error_message.include?("failed to load")
        UI.message("üí° This is an API key file loading error")
        UI.message("üí° Suggested fixes:")
        UI.message("   ‚Ä¢ Check API key file exists in ./private_keys/")
        UI.message("   ‚Ä¢ Verify API key content is valid P8 format") 
        UI.message("   ‚Ä¢ Ensure API_PRIVATE_KEYS_DIR is set correctly")
        
        # Show current state
        UI.message("üîç Current API key environment:")
        UI.message("   API_PRIVATE_KEYS_DIR: #{ENV['API_PRIVATE_KEYS_DIR']}")
        if Dir.exist?("./private_keys")
          UI.message("   Files in private_keys: #{Dir.glob('./private_keys/*').join(', ')}")
        else
          UI.message("   private_keys directory: Not found")
        end
      end
      
      if error_message.include?("altool")
        UI.message("üí° This is an altool-related error")
        if error_message.include?("object cannot be nil")
          UI.message("üí° Possible causes:")
          UI.message("   ‚Ä¢ API key doesn't have TestFlight permissions")
          UI.message("   ‚Ä¢ App not properly configured in App Store Connect")
          UI.message("   ‚Ä¢ API key file format issue")
        end
      end
      
      raise upload_error
    end
  end
  
  # Add other deployment methods...
  private_lane :deploy_to_testflight_beta do
    UI.header("‚úàÔ∏è TESTFLIGHT BETA UPLOAD")
    # Similar implementation with API key file handling...
  end
  
  private_lane :deploy_to_app_store do
    UI.header("üè™ APP STORE UPLOAD") 
    # Similar implementation with API key file handling...
  end
  
  # Enhanced error handling with cleanup
  error do |lane, exception|
    UI.header("‚ùå FASTLANE ERROR")
    UI.error("Lane: #{lane}")
    UI.error("Error: #{exception.message}")
    UI.error("Class: #{exception.class}")
    
    # Clean up API key files on error
    if Dir.exist?("./private_keys")
      UI.message("üßπ Cleaning up API key files...")
      Dir.glob("./private_keys/AuthKey_*.p8").each do |file|
        File.delete(file)
        UI.message("   Deleted: #{file}")
      end
    end
    
    # Clean up build artifacts on error
    if File.exist?("build")
      UI.message("üßπ Cleaning up build artifacts...")
      sh("rm -rf build")
    end
    
    if ENV['CI']
      UI.message("üìã Fastlane logs available in artifacts")
    end
  end
end