# android/fastlane/Fastfile - Standardized for all platforms
default_platform(:android)

platform :android do
  
  #Setup และ Configuration
  before_all do
    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
    setup_ci if ENV['CI']
    apply_version_from_env if ENV['CI']
  end

  #Version Management
  private_lane :apply_version_from_env do
    version_name = ENV['VERSION_NAME'] || "1.0.0"
    version_code = ENV['VERSION_CODE'] || "1"
    
    UI.message("📋 Applying version from GitHub Actions workflow:")
    UI.message("   versionName: #{version_name}")
    UI.message("   versionCode: #{version_code}")
    UI.message("   Source: GitHub Actions (#{ENV['GITHUB_REF_NAME']})")
    
    # For Flutter, version is handled by flutter build command
    # No need to modify gradle files directly
    UI.success("✅ Version will be applied during Flutter build:")
    UI.success("   --build-name=#{version_name}")
    UI.success("   --build-number=#{version_code}")
  end

  #สำหรับ Deployment Internal Testing
  lane :deploy_develop do
    UI.message("🚀 Deploying to Internal Testing...")
    build_and_deploy(
      track: 'internal',
      release_status: 'draft'
    )
  end

  #สำหรับ Deployment Alpha Testing
  lane :deploy_preprod do
    UI.message("🚀 Deploying to Alpha Testing...")
    build_and_deploy(
      track: 'alpha',
      release_status: 'draft'
    )
  end

  #สำหรับ Deployment Production
  lane :deploy_master do
    UI.message("🎉 Deploying to Production...")
    build_and_deploy(
      track: 'production',
      release_status: 'draft',
      # rollout: '0.1'  # 10% rollout for safety
    )
  end

  #สำหรับ Build แต่ไม่ deploy
  lane :build_only do
    UI.message("� Building release bundle...")
    gradle(
      task: "clean bundleRelease",
      print_command: false
    )
    UI.success("✅ Build completed successfully!")
  end

  #Core deployment logic
  private_lane :build_and_deploy do |options|
    version_name = ENV['VERSION_NAME'] || "1.0.0"
    version_code = ENV['VERSION_CODE'] || "1"
    
    UI.message("� Using version from environment:")
    UI.message("   VERSION_NAME: #{version_name}")
    UI.message("   VERSION_CODE: #{version_code}")
    
    # 🔍 Look for existing AAB file (should be already built by workflow)
    possible_paths = [
      "../../build/app/outputs/bundle/release/app-release.aab",
      "../build/app/outputs/bundle/release/app-release.aab",
      "build/app/outputs/bundle/release/app-release.aab"
    ]
    
    aab_path = nil
    possible_paths.each do |path|
      abs_path = File.expand_path(path)
      if File.exist?(abs_path)
        aab_path = abs_path
        UI.message("✅ Found AAB at: #{aab_path}")
        break
      end
    end
    
    # If no AAB found, build it
    unless aab_path
      UI.message("🔨 No existing AAB found, building Flutter Android Bundle...")
      sh("cd ../.. && flutter build appbundle --release --build-name=#{version_name} --build-number=#{version_code}")
      
      # Check again for AAB
      possible_paths.each do |path|
        abs_path = File.expand_path(path)
        if File.exist?(abs_path)
          aab_path = abs_path
          UI.message("✅ Built AAB at: #{aab_path}")
          break
        end
      end
    end
    
    unless aab_path
      UI.user_error!("❌ AAB file not found in any expected location")
    end
    
    aab_size = File.size(aab_path) / 1024.0 / 1024.0
    UI.message("📏 AAB size: #{aab_size.round(2)} MB")
    
    # Upload to Play Store
    upload_to_play_store(
      track: options[:track],
      json_key: "google-play-key.json",
      aab: aab_path,
      release_status: options[:release_status],
      rollout: options[:rollout],
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      timeout: 300
    )
    
    UI.success("✅ Successfully uploaded to #{options[:track]} track!")
  end

  #Error handling
  error do |lane, exception|
    error_message = "❌ Android deployment failed in lane '#{lane}': #{exception.message}"
    UI.error(error_message)
    
    # Upload logs for debugging
    if ENV['CI']
      UI.message("📋 Fastlane logs available in artifacts")
    end
    
    raise exception
  end
end