# .github/workflows/flutter-ios-build.yml - Flutter iOS Build and Deploy
name: "Flutter iOS Build and Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      # Accept pre-built dependencies cache
      cache_key:
        description: 'Dependencies cache key from main pipeline'
        required: false
        type: string
        default: ''
      # Accept pre-built Flutter artifacts
      build_artifacts:
        description: 'Pre-built Flutter build artifacts name'
        required: false
        type: string
        default: ''
    secrets:
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_API_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true
      MATCH_PASSWORD:
        required: true
      MATCH_GIT_URL:
        required: true
      MATCH_PRIVATE_KEY:
        required: false

env:
  FLUTTER_VERSION: '3.24.0'  # Latest stable Flutter version
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  build-ios:
    runs-on: macos-15  # Latest stable macOS
    timeout-minutes: 45  # Flutter iOS builds can take longer
    
    # Environment logic
    environment: 
      name: ${{ inputs.branch == 'master' && 'production' || inputs.branch }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # üéØ System information for debugging
      - name: System Information
        run: |
          echo "üñ•Ô∏è System Information:"
          echo "- macOS: $(sw_vers -productVersion)"
          echo "- Xcode: $(xcodebuild -version | head -1)"
          echo "- Available Xcode versions:"
          ls /Applications/ | grep Xcode || echo "  Only default Xcode available"
          echo "- Ruby: $(ruby --version)"
          echo "- Available space: $(df -h . | tail -1 | awk '{print $4}')"

      # üéØ Setup Flutter Environment
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      # üöÄ Smart dependency handling - use cache if available
      - name: Restore Dependencies Cache
        id: restore-deps-cache
        if: inputs.cache_key != ''
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
            ~/.cocoapods
          key: ${{ inputs.cache_key }}

      - name: Get Flutter Dependencies
        if: inputs.cache_key == '' || steps.restore-deps-cache.outputs.cache-hit != 'true'
        run: flutter pub get

      # üéØ Smart Flutter build artifacts handling
      - name: Download Pre-built Flutter Artifacts
        if: inputs.build_artifacts != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build_artifacts }}
          path: ./pre-built-artifacts/

      - name: Setup Flutter Build Artifacts
        run: |
          if [ "${{ inputs.build_artifacts }}" != "" ] && [ -d "./pre-built-artifacts/Runner.app" ]; then
            # Use pre-built artifacts
            echo "‚úÖ Using pre-built Flutter iOS artifacts"
            mkdir -p build/ios/iphoneos/
            cp -r ./pre-built-artifacts/Runner.app build/ios/iphoneos/ || echo "iOS app artifacts not available"
            
            if [ -d "build/ios/iphoneos/Runner.app" ]; then
              echo "üì¶ Using pre-built iOS app"
            fi
          else
            echo "üîÑ Will create fresh Flutter iOS build..."
          fi

      # üîÑ Enhanced Ruby setup
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      # üöÄ Enhanced iOS dependencies cache
      - name: Cache iOS Build Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ios/DerivedData
            ios/build
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
            ~/.cocoapods
          key: ${{ runner.os }}-flutter-ios-${{ hashFiles('ios/Podfile.lock', 'pubspec.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ios-

      - name: Cache Restore Debug
        run: |
          echo "üîç Cache Restore Debug:"
          echo "- Input Cache Key: ${{ inputs.cache_key }}"
          echo "- Cache Hit: ${{ steps.restore-deps-cache.outputs.cache-hit }}"
          echo "- Cache Primary Key: ${{ steps.restore-deps-cache.outputs.cache-primary-key }}"
          echo "- Cache Matched Key: ${{ steps.restore-deps-cache.outputs.cache-matched-key }}"
          
          # Check if pub cache exists
          if [ -d "$PUB_CACHE" ]; then
            echo "- Pub cache restored: $(du -sh $PUB_CACHE | cut -f1)"
          else
            echo "- Pub cache: Not restored"
          fi

      # üéØ Flutter version update in pubspec.yaml
      - name: Update Flutter App Version
        run: |
          echo "üì± Updating Flutter app version..."
          echo "Target version: ${{ inputs.version }} (code: ${{ inputs.version_code }})"
          
          # Backup original
          cp pubspec.yaml pubspec.yaml.backup
          
          # Update pubspec.yaml with new version
          # Format: version: 1.2.3+123
          sed -i '' "s/^version: .*/version: ${{ inputs.version }}+${{ inputs.version_code }}/" pubspec.yaml
          
          # Verify the changes
          echo "‚úÖ Updated pubspec.yaml:"
          grep "^version:" pubspec.yaml

      # üéØ Enhanced Pod installation
      - name: Install CocoaPods Dependencies
        run: |
          cd ios
          echo "üì± Installing CocoaPods dependencies..."
          
          # Check if cache hit
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
            echo "‚úÖ Pods cache found, verifying integrity..."
            pod install --deployment 2>/dev/null || {
              echo "‚ö†Ô∏è Cache invalid, reinstalling..."
              rm -rf Pods Podfile.lock
              pod install
            }
          else
            echo "üîÑ Installing fresh Pods..."
            pod install
          fi
          
          # Post-install verification
          if [ -d "Pods" ]; then
            pod_count=$(find Pods -name "*.podspec" | wc -l)
            echo "‚úÖ CocoaPods installation completed: $pod_count pods"
          else
            echo "‚ùå CocoaPods installation failed!"
            exit 1
          fi

      # üîÑ Enhanced Xcode setup
      - name: Setup Xcode Environment
        run: |
          # Ensure we're using the default Xcode
          sudo xcode-select -s /Applications/Xcode.app
          
          # Clear any derived data issues
          rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
          
          # Verify setup
          echo "‚úÖ Xcode setup completed:"
          echo "- Selected: $(xcode-select -p)"
          echo "- Version: $(xcodebuild -version)"
          echo "- SDKs: $(xcodebuild -showsdks | grep iOS | tail -1)"

      # üîí Enhanced SSH setup for Match (only when needed)
      - name: Setup SSH for Match
        if: inputs.environment == 'release'
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.MATCH_PRIVATE_KEY }}
        continue-on-error: true

      # üéØ Enhanced App Store Connect API setup
      - name: Setup App Store Connect API
        if: inputs.environment == 'release'
        run: |
          mkdir -p /tmp/ios-keys
          
          # Check if API key is provided and setup
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY }}" ]; then
            echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > /tmp/ios-keys/AuthKey.p8
            
            # Verify API key
            if [ -f "/tmp/ios-keys/AuthKey.p8" ]; then
              key_size=$(ls -lh /tmp/ios-keys/AuthKey.p8 | awk '{print $5}')
              echo "‚úÖ App Store Connect API key ready: $key_size"
            else
              echo "‚ùå API key creation failed!"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No App Store Connect API key provided - some deployment features may not work"
          fi

      # üöÄ Enhanced Flutter iOS Debug Build
      - name: Build Flutter iOS Debug
        if: inputs.environment == 'debug'
        run: |
          echo "üî® Building Flutter iOS Debug..."
          
          # Check if pre-built artifacts exist
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "‚úÖ Using pre-built iOS debug app"
          else
            # Pre-build validation
            echo "üìã Pre-build checks:"
            echo "- Flutter version: $(flutter --version | head -1)"
            echo "- Xcode workspace: $(ls -la ios/*.xcworkspace)"
            echo "- iOS schemes: $(xcodebuild -workspace ios/Runner.xcworkspace -list | grep Runner)"
            echo "- Simulators: $(xcrun simctl list devices available | grep iPhone | head -3)"
            
            # Build with enhanced settings
            flutter build ios --debug --no-codesign \
              --build-name="${{ inputs.version }}" \
              --build-number="${{ inputs.version_code }}" \
              --verbose | tee build.log
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Flutter iOS Debug build completed successfully"
              
              # Build summary
              if [ -f "build.log" ]; then
                build_time=$(grep "Built build/ios" build.log | tail -1 || echo "Build time not found")
                echo "‚è±Ô∏è $build_time"
              fi
            else
              echo "‚ùå Flutter iOS Debug build failed"
              echo "üìÑ Last 30 lines of build log:"
              tail -30 build.log
              exit 1
            fi
          fi

      # üöÄ Enhanced Release Build (No Deploy)
      - name: Build Flutter iOS Release (No Deploy)
        if: inputs.environment == 'release' && inputs.publish == false
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          VERSION_NUMBER: ${{ inputs.version }}
          BUILD_NUMBER: ${{ inputs.version_code }}
        run: |
          cd ios
          echo "üî® Building Flutter iOS Release (No Deploy)..."
          
          # Check if pre-built artifacts exist
          if [ -d "../build/ios/iphoneos/Runner.app" ]; then
            echo "‚úÖ Using pre-built iOS release app, will re-sign for release"
          fi
          
          # Pre-build setup
          echo "üìã Release build configuration:"
          echo "- Version: $VERSION_NUMBER"
          echo "- Build: $BUILD_NUMBER"
          echo "- Match URL configured: $([ -n "$MATCH_GIT_URL" ] && echo "Yes" || echo "No")"
          
          # Build with Fastlane
          if bundle exec fastlane build_only; then
            echo "‚úÖ Flutter iOS Release build completed successfully"
            
            # Find and report built artifacts
            if [ -d "build" ]; then
              echo "üì¶ Build artifacts:"
              ls -la build/*.ipa 2>/dev/null || echo "No IPA files found"
              
              # Report sizes
              for ipa in build/*.ipa; do
                if [ -f "$ipa" ]; then
                  ipa_size=$(ls -lh "$ipa" | awk '{print $5}')
                  echo "- $(basename "$ipa"): $ipa_size"
                fi
              done
            fi
          else
            echo "‚ùå Flutter iOS Release build failed"
            echo "üîç Checking Fastlane logs..."
            ls -la fastlane/logs/ 2>/dev/null || echo "No Fastlane logs found"
            exit 1
          fi

      # üöÄ Enhanced Build and Deploy
      - name: Build and Deploy to TestFlight/App Store
        if: inputs.environment == 'release' && inputs.publish == true
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_KEY_PATH: /tmp/ios-keys/AuthKey.p8
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          VERSION_NUMBER: ${{ inputs.version }}
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          cd ios
          echo "üöÄ Building and deploying Flutter iOS to App Store Connect..."
          
          # Pre-deploy validation
          echo "üìã Deployment configuration:"
          echo "- Target: ${{ inputs.branch }}"
          echo "- Version: $VERSION_NUMBER"
          echo "- Build: $BUILD_NUMBER"
          echo "- API Key ID: ${APP_STORE_CONNECT_API_KEY_ID:0:8}..."
          echo "- API Key file: $([ -f "$APP_STORE_CONNECT_API_KEY_PATH" ] && echo "Ready" || echo "Missing")"
          
          # Determine deployment track
          TRACK="TestFlight Internal"
          case "${{ inputs.branch }}" in
            "master") TRACK="App Store" ;;
            "preprod") TRACK="TestFlight Beta" ;;
          esac
          echo "- Deployment track: $TRACK"
          
          # Deploy with Fastlane
          if bundle exec fastlane deploy_${{ inputs.branch }}; then
            echo "‚úÖ Flutter iOS deployment to $TRACK completed successfully"
          else
            echo "‚ùå Flutter iOS deployment failed"
            echo "üîç Fastlane logs:"
            find fastlane/logs -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "No Fastlane logs found"
            exit 1
          fi

      # üéØ Enhanced artifacts upload
      - name: Upload iOS Build Artifacts
        if: inputs.publish == false && inputs.environment == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ios-${{ inputs.environment }}-${{ inputs.version }}-${{ github.run_number }}
          path: |
            ios/build/*.ipa
            ios/build/*.dSYM.zip
            build.log
            ios/fastlane/logs/*.log
          retention-days: 7
          compression-level: 6

      # üéØ Enhanced build summary
      - name: Generate Build Summary
        if: always()
        run: |
          echo "## üçé Flutter iOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter Version:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner:** ${{ runner.os }} ($(sw_vers -productVersion))" >> $GITHUB_STEP_SUMMARY
          echo "- **Xcode:** $(xcodebuild -version | head -1)" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          if [ "${{ job.status }}" = "success" ]; then
            echo "- **Build Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # File sizes and details
          if [ -d "ios/build" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì¶ Build Artifacts" >> $GITHUB_STEP_SUMMARY
            
            for ipa in ios/build/*.ipa; do
              if [ -f "$ipa" ]; then
                ipa_name=$(basename "$ipa")
                ipa_size=$(ls -lh "$ipa" | awk '{print $5}')
                echo "- **$ipa_name:** $ipa_size" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # dSYM files
            for dsym in ios/build/*.dSYM.zip; do
              if [ -f "$dsym" ]; then
                dsym_name=$(basename "$dsym")
                dsym_size=$(ls -lh "$dsym" | awk '{print $5}')
                echo "- **$dsym_name:** $dsym_size" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          # Deployment info
          if [ "${{ inputs.publish }}" = "true" ]; then
            TRACK="TestFlight Internal"
            case "${{ inputs.branch }}" in
              "master") TRACK="App Store" ;;
              "preprod") TRACK="TestFlight Beta" ;;
            esac
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üöÄ Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Target:** $TRACK" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ‚úÖ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.environment }}" = "release" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìÅ Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** Available for download" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance metrics
          if [ -f "build.log" ]; then
            if grep -q "Built build/ios" build.log; then
              build_time=$(grep "Built build/ios" build.log | tail -1 | grep -o '[0-9]*\.[0-9]*s' || echo "Unknown")
              if [ "$build_time" != "Unknown" ]; then
                echo "- **Build Time:** $build_time" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Flutter iOS build completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      # üßπ Cleanup sensitive files
      - name: Cleanup Sensitive Files
        if: always()
        run: |
          rm -rf /tmp/ios-keys
          
          # Clean up Fastlane temporary files
          rm -rf ios/fastlane/tmp 2>/dev/null || true
          
          echo "‚úÖ Sensitive files cleaned up"