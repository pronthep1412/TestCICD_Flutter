# .github/workflows/ios-reusable.yml - Reusable iOS Workflow
name: iOS Build & Deploy

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      is_production:
        required: false
        type: string
        default: 'false'
    secrets:
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_API_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true
      # MATCH_PASSWORD:
      #   required: true
      MATCH_GIT_URL:
        required: true
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.2.3)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (e.g., 123)'
        required: true
        default: '1'
      branch:
        description: 'Branch name'
        required: true
        default: 'develop'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  build-and-deploy-ios:
    runs-on: macos-latest
    timeout-minutes: 35
    environment: 
      name: ${{ inputs.branch == 'main' && 'production' || inputs.branch }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Dependencies
        run: flutter pub get

      - name: Install CocoaPods
        run: cd ios && pod install

      - name: Update Version
        run: |
          sed -i '' "s/^version: .*/version: ${{ inputs.version }}+${{ inputs.version_code }}/" pubspec.yaml

      # ðŸ”’ Enhanced SSH setup for Match (only when needed)
      - name: Setup SSH for Match
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.MATCH_PRIVATE_KEY }}
        continue-on-error: true

      - name: Setup App Store Connect API
        run: |
          mkdir -p /tmp/ios-keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > /tmp/ios-keys/AuthKey.p8

      - name: Build and Deploy iOS
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_PATH: /tmp/ios-keys/AuthKey.p8
          # MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: |
          cd ios
          
          TARGET="testflight_internal"
          case "${{ inputs.branch }}" in
            "main") TARGET="app_store" ;;
            "staging") TARGET="testflight_beta" ;;
          esac
          
          bundle exec fastlane ios deploy \
            target:$TARGET \
            version:"${{ inputs.version }}" \
            build_number:"${{ inputs.version_code }}"

      - name: Cleanup
        if: always()
        run: rm -rf /tmp/ios-keys