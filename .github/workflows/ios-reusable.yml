# .github/workflows/ios-reusable.yml - Updated with API key content support
name: iOS Build & Deploy

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: 'development'
    secrets:
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_API_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true
      MATCH_PASSWORD:
        required: true
      MATCH_GIT_URL:
        required: true
      MATCH_PRIVATE_KEY:
        required: true
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.2.3)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (e.g., 123)'
        required: true
        default: '1'
      branch:
        description: 'Branch name'
        required: true
        default: 'develop'
      environment:
        description: 'Environment'
        required: false
        default: 'development'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  build-and-deploy-ios:
    runs-on: macos-15
    timeout-minutes: 35
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System Information
        run: |
          echo "🖥️ System Information:"
          echo "- macOS: $(sw_vers -productVersion)"
          echo "- Xcode: $(xcodebuild -version | head -1)"
          echo "- Available space: $(df -h . | tail -1 | awk '{print $4}')"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-flutter-ios-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ios-

      - name: Get Dependencies
        run: |
          echo "📦 Installing Flutter dependencies..."
          flutter pub get
          echo "✅ Flutter dependencies installed"

      - name: Update Version
        run: |
          echo "📝 Updating version to: ${{ inputs.version }}+${{ inputs.version_code }}"
          sed -i '' "s/^version: .*/version: ${{ inputs.version }}+${{ inputs.version_code }}/" pubspec.yaml
          grep "^version:" pubspec.yaml
          echo "✅ Version updated in pubspec.yaml"

      # 🔑 SETUP SSH FOR FASTLANE MATCH
      - name: Setup SSH for Match
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.MATCH_PRIVATE_KEY }}

      # 🔍 DEBUG SSH CONNECTION
      - name: Test SSH Connection to Match Repository
        run: |
          echo "🔍 Testing SSH connection to Match repository..."
          
          # Test SSH connection to GitHub
          ssh -T git@github.com || true
          
          # Test specific repository access
          echo "Testing access to: ${{ secrets.MATCH_GIT_URL }}"
          git ls-remote "${{ secrets.MATCH_GIT_URL }}" || true
          
          # Show SSH key fingerprint
          ssh-add -l || true

      # ✅ ไม่ต้องสร้าง API key file แล้ว - ใช้ content โดยตรง
      - name: Verify App Store Connect API Configuration
        run: |
          echo "🔑 Verifying App Store Connect API configuration..."
          
          # Check if all required API variables are available
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
            echo "✅ API Key ID: Available"
          else
            echo "❌ API Key ID: Missing"
          fi
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}" ]; then
            echo "✅ Issuer ID: Available"
          else
            echo "❌ Issuer ID: Missing"
          fi
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY }}" ]; then
            # Check if it's valid base64
            if echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > /dev/null 2>&1; then
              echo "✅ API Key Content: Available and valid base64"
              decoded_length=$(echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d | wc -c | tr -d ' ')
              echo "   Decoded length: $decoded_length characters"
            else
              echo "❌ API Key Content: Invalid base64 format"
            fi
          else
            echo "❌ API Key Content: Missing"
          fi

      # 📱 INSTALL COCOAPODS DEPENDENCIES
      - name: Install CocoaPods Dependencies
        run: |
          echo "📱 Installing CocoaPods dependencies..."
          cd ios
          
          # Check if cache hit
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
            echo "✅ Pods cache found, verifying integrity..."
            pod install --deployment 2>/dev/null || {
              echo "⚠️ Cache invalid, reinstalling..."
              rm -rf Pods Podfile.lock
              pod install
            }
          else
            echo "🔄 Installing fresh Pods..."
            pod install
          fi
          
          echo "✅ CocoaPods installation completed"

      # 🔧 Enhanced Ruby setup for Fastlane
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      # 🔨 BUILD & DEPLOY WITH FASTLANE
      - name: Build and Deploy iOS
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          FL_UPDATE_PLIST_PATH: Runner/Info.plist
        run: |
          echo "🍎 Building and deploying iOS..."
          
          # Determine deployment target based on branch
          case "${{ inputs.branch }}" in
            "main") 
              TARGET="app_store"
              echo "🏪 Target: App Store"
              ;;
            "staging") 
              TARGET="testflight_beta"
              echo "✈️ Target: TestFlight Beta"
              ;;
            *) 
              TARGET="testflight_internal"
              echo "🔒 Target: TestFlight Internal"
              ;;
          esac
          
          # Pre-build validation
          echo "📋 Build configuration:"
          echo "- Target: $TARGET"
          echo "- Version: ${{ inputs.version }}"
          echo "- Build: ${{ inputs.version_code }}"
          echo "- Branch: ${{ inputs.branch }}"
          echo "- API Key ID: ${APP_STORE_CONNECT_API_KEY_ID:0:8}..."
          echo "- API Key Content: $([ -n "$APP_STORE_CONNECT_API_KEY_CONTENT" ] && echo "Available" || echo "Missing")"
          
          # Deploy with Fastlane
          cd ios
          
          echo "🚀 Starting deployment..."
          bundle exec fastlane deploy \
            target:$TARGET \
            version:"${{ inputs.version }}" \
            build_number:"${{ inputs.version_code }}"
          
          echo "✅ iOS deployment completed!"

      # 📊 VERIFY BUILD ARTIFACTS
      - name: Verify Build Artifacts
        run: |
          echo "🔍 Verifying build artifacts..."
          
          # Check for IPA file
          if find ios -name "*.ipa" -type f | head -1 | read ipa_file; then
            echo "✅ IPA found: $ipa_file"
            ipa_size=$(ls -lh "$ipa_file" | awk '{print $5}')
            echo "   Size: $ipa_size"
          else
            echo "⚠️ No IPA file found (may be normal for direct upload)"
          fi
          
          # Check Fastlane logs
          if [ -d "ios/fastlane/logs" ]; then
            echo "📋 Fastlane logs available"
            ls -la ios/fastlane/logs/
          fi
          
          # Check build directory
          if [ -d "ios/build" ]; then
            echo "📦 Build directory contents:"
            ls -la ios/build/
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ inputs.version }}-${{ github.run_number }}
          path: |
            ios/build/
            ios/fastlane/logs/
            ios/*.ipa
          retention-days: 30

      - name: Build Summary
        run: |
          echo "## 🍎 iOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner:** ${{ runner.os }} ($(sw_vers -productVersion))" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          
          # Show deployment target
          case "${{ inputs.branch }}" in
            "main") echo "- **Target:** 🏪 App Store" >> $GITHUB_STEP_SUMMARY ;;
            "staging") echo "- **Target:** ✈️ TestFlight Beta" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "- **Target:** 🔒 TestFlight Internal" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Check for IPA and show size
          if find ios -name "*.ipa" -type f | head -1 | read ipa_file; then
            size=$(ls -lh "$ipa_file" | awk '{print $5}')
            echo "- **IPA Size:** $size" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance metrics
          if [ -f "ios/fastlane/logs/"*.log ]; then
            echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ⚠️ Check logs" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up sensitive files..."
          # ✅ ไม่ต้อง cleanup API key file แล้วเพราะไม่ได้สร้าง
          # SSH keys are cleaned up automatically by ssh-agent action
          
          # Clean up any temporary build files
          rm -rf ios/build/temp 2>/dev/null || true
          rm -rf ios/fastlane/tmp 2>/dev/null || true
          
          echo "✅ Cleanup completed"