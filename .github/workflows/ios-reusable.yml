# .github/workflows/ios-build-flutter.yml - Optimized version with React Native workflow features
name: "Flutter iOS Build and Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      # üÜï NEW: Accept pre-built dependencies cache
      cache_key:
        description: 'Dependencies cache key from main pipeline'
        required: false
        type: string
        default: ''
      # üÜï NEW: Accept pre-built Flutter build
      flutter_build_artifact:
        description: 'Pre-built Flutter build artifact name'
        required: false
        type: string
        default: ''
    secrets:
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_API_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true
      MATCH_PASSWORD:
        required: true
      MATCH_GIT_URL:
        required: true
      MATCH_PRIVATE_KEY:
        required: true

env:
  FLUTTER_VERSION: '3.32.2'
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  build-ios:
    runs-on: macos-15  # Latest stable macOS
    timeout-minutes: 40  # üîÑ Optimized timeout
    
    # Simple environment logic
    environment: 
      name: ${{ inputs.branch == 'main' && 'production' || inputs.branch }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # üéØ System information for debugging
      - name: System Information
        run: |
          echo "üñ•Ô∏è System Information:"
          echo "- macOS: $(sw_vers -productVersion)"
          echo "- Xcode: $(xcodebuild -version | head -1)"
          echo "- Available Xcode versions:"
          ls /Applications/ | grep Xcode || echo "  Only default Xcode available"
          echo "- Ruby: $(ruby --version)"
          echo "- Available space: $(df -h . | tail -1 | awk '{print $4}')"

      # üéØ Enhanced Flutter setup
      - name: Setup Flutter Environment
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # üöÄ Smart dependency handling
      - name: Restore Dependencies Cache
        id: restore-deps-cache
        if: inputs.cache_key != ''
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
            .dart_tool
            ios/Pods
            ios/build
          key: ${{ inputs.cache_key }}

      - name: Cache Flutter Dependencies
        if: inputs.cache_key == '' || steps.restore-deps-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
            .dart_tool
            ios/Pods
            ios/build
          key: ${{ runner.os }}-flutter-ios-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ios-

      - name: Install Flutter Dependencies
        if: inputs.cache_key == '' || steps.restore-deps-cache.outputs.cache-hit != 'true'
        run: |
          echo "üì¶ Installing Flutter dependencies..."
          flutter pub get
          echo "‚úÖ Flutter dependencies installed"

      # üéØ Smart Flutter build handling
      - name: Download Pre-built Flutter Build
        if: inputs.flutter_build_artifact != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.flutter_build_artifact }}
          path: ./flutter-build/

      - name: Setup Flutter Build for iOS
        run: |
          if [ "${{ inputs.flutter_build_artifact }}" != "" ] && [ -d "./flutter-build/build/ios" ]; then
            # Use pre-built Flutter build
            echo "‚úÖ Using pre-built Flutter iOS build"
            cp -r ./flutter-build/build/ios/* build/ios/ 2>/dev/null || mkdir -p build/ios
            echo "üì¶ Pre-built Flutter build restored"
          else
            # Create new Flutter build
            echo "üîÑ Creating fresh Flutter iOS build..."
            # Will be built later in Fastlane step
            echo "üìù Fresh build will be created during deployment"
          fi

      # üîÑ Enhanced version management
      - name: Update Version in pubspec.yaml
        run: |
          echo "üìù Updating version to: ${{ inputs.version }}+${{ inputs.version_code }}"
          
          # Create backup
          cp pubspec.yaml pubspec.yaml.bak
          
          # Update version with proper validation
          if grep -q "^version:" pubspec.yaml; then
            sed -i '' "s/^version: .*/version: ${{ inputs.version }}+${{ inputs.version_code }}/" pubspec.yaml
          else
            echo "version: ${{ inputs.version }}+${{ inputs.version_code }}" >> pubspec.yaml
          fi
          
          # Verify update
          echo "üìã Updated version:"
          grep "^version:" pubspec.yaml || echo "‚ùå Version update failed!"
          
          # Validate pubspec.yaml
          if flutter pub deps > /dev/null 2>&1; then
            echo "‚úÖ pubspec.yaml is valid"
          else
            echo "‚ùå pubspec.yaml validation failed, restoring backup"
            mv pubspec.yaml.bak pubspec.yaml
            exit 1
          fi

      # üîÑ Enhanced Ruby setup
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      - name: Cache Debug
        run: |
          echo "üîç Cache Debug Information:"
          echo "- Input Cache Key: ${{ inputs.cache_key }}"
          echo "- Cache Hit: ${{ steps.restore-deps-cache.outputs.cache-hit }}"
          echo "- Cache Primary Key: ${{ steps.restore-deps-cache.outputs.cache-primary-key }}"
          echo "- Cache Matched Key: ${{ steps.restore-deps-cache.outputs.cache-matched-key }}"
          
          # Check dependencies
          if [ -d "${{ env.PUB_CACHE }}" ]; then
            echo "- Pub Cache: $(du -sh ${{ env.PUB_CACHE }} | cut -f1)"
          else
            echo "- Pub Cache: Not restored"
          fi
          
          if [ -d "ios/Pods" ]; then
            pod_count=$(find ios/Pods -name "*.podspec" | wc -l)
            echo "- CocoaPods: $pod_count pods cached"
          else
            echo "- CocoaPods: Not cached"
          fi

      # üéØ Enhanced CocoaPods installation
      - name: Install CocoaPods Dependencies
        run: |
          cd ios
          echo "üì± Installing CocoaPods dependencies..."
          
          # Check if cache hit
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
            echo "‚úÖ Pods cache found, verifying integrity..."
            pod install --deployment 2>/dev/null || {
              echo "‚ö†Ô∏è Cache invalid, reinstalling..."
              rm -rf Pods Podfile.lock
              pod install
            }
          else
            echo "üîÑ Installing fresh Pods..."
            pod install
          fi
          
          # Post-install verification
          if [ -d "Pods" ]; then
            pod_count=$(find Pods -name "*.podspec" | wc -l)
            echo "‚úÖ CocoaPods installation completed: $pod_count pods"
          else
            echo "‚ùå CocoaPods installation failed!"
            exit 1
          fi

      # üîÑ Enhanced Xcode setup
      - name: Setup Xcode Environment
        run: |
          # Ensure we're using the default Xcode
          sudo xcode-select -s /Applications/Xcode.app
          
          # Clear any derived data issues
          rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
          
          # Verify setup
          echo "‚úÖ Xcode setup completed:"
          echo "- Selected: $(xcode-select -p)"
          echo "- Version: $(xcodebuild -version)"
          echo "- SDKs: $(xcodebuild -showsdks | grep iOS | tail -1)"

      # üîí Enhanced SSH setup for Match
      - name: Setup SSH for Match
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.MATCH_PRIVATE_KEY }}

      # üîç Enhanced SSH connection debugging
      - name: Test SSH Connection to Match Repository
        run: |
          echo "üîç Testing SSH connection to Match repository..."
          
          # Test SSH connection to GitHub
          ssh -T git@github.com || true
          
          # Test specific repository access
          echo "Testing access to: ${{ secrets.MATCH_GIT_URL }}"
          git ls-remote "${{ secrets.MATCH_GIT_URL }}" || true
          
          # Show SSH key fingerprint
          ssh-add -l || true

      # üéØ Enhanced App Store Connect API setup
      - name: Verify App Store Connect API Configuration
        run: |
          echo "üîë Verifying App Store Connect API configuration..."
          
          # Check if all required API variables are available
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
            echo "‚úÖ API Key ID: Available (${API_KEY_ID:0:8}...)"
          else
            echo "‚ùå API Key ID: Missing"
          fi
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}" ]; then
            echo "‚úÖ Issuer ID: Available"
          else
            echo "‚ùå Issuer ID: Missing"
          fi
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY }}" ]; then
            # Check if it's valid base64
            if echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > /dev/null 2>&1; then
              echo "‚úÖ API Key Content: Available and valid base64"
              decoded_length=$(echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d | wc -c | tr -d ' ')
              echo "   Decoded length: $decoded_length characters"
            else
              echo "‚ùå API Key Content: Invalid base64 format"
            fi
          else
            echo "‚ùå API Key Content: Missing"
          fi
        env:
          API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}

      # üöÄ Enhanced Debug Build
      - name: Build Flutter iOS Debug
        if: inputs.environment == 'debug'
        run: |
          echo "üî® Building Flutter iOS Debug..."
          
          # Pre-build validation
          echo "üìã Pre-build checks:"
          echo "- Flutter version: $(flutter --version | head -1)"
          echo "- Dart version: $(dart --version)"
          echo "- iOS deployment target: $(grep IPHONEOS_DEPLOYMENT_TARGET ios/Runner.xcodeproj/project.pbxproj | head -1 || echo 'Not found')"
          
          # Build Flutter for iOS
          set -o pipefail
          flutter build ios --debug --simulator | tee build.log
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Flutter iOS Debug build completed successfully"
            
            # Build summary
            if [ -f "build.log" ]; then
              build_time=$(grep "Built" build.log | tail -1 || echo "Build time not found")
              echo "‚è±Ô∏è $build_time"
            fi
          else
            echo "‚ùå Flutter iOS Debug build failed"
            echo "üìÑ Last 30 lines of build log:"
            tail -30 build.log
            exit 1
          fi

      # üöÄ Enhanced Release Build (No Deploy)
      - name: Build Flutter iOS Release (No Deploy)
        if: inputs.environment == 'release' && inputs.publish == false
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: |
          cd ios
          echo "üî® Building Flutter iOS Release (No Deploy)..."
          
          # Pre-build setup
          echo "üìã Release build configuration:"
          echo "- Version: ${{ inputs.version }}"
          echo "- Build: ${{ inputs.version_code }}"
          echo "- Match URL configured: $([ -n "$MATCH_GIT_URL" ] && echo "Yes" || echo "No")"
          
          # Build with Fastlane
          if bundle exec fastlane build_only version:"${{ inputs.version }}" build_number:"${{ inputs.version_code }}"; then
            echo "‚úÖ Flutter iOS Release build completed successfully"
            
            # Find and report built artifacts
            if [ -d "build" ]; then
              echo "üì¶ Build artifacts:"
              ls -la build/*.ipa 2>/dev/null || echo "No IPA files found"
              
              # Report sizes
              for ipa in build/*.ipa; do
                if [ -f "$ipa" ]; then
                  ipa_size=$(ls -lh "$ipa" | awk '{print $5}')
                  echo "- $(basename "$ipa"): $ipa_size"
                fi
              done
            fi
          else
            echo "‚ùå Flutter iOS Release build failed"
            echo "üîç Checking Fastlane logs..."
            ls -la fastlane/logs/ 2>/dev/null || echo "No Fastlane logs found"
            exit 1
          fi

      # üöÄ Enhanced Build and Deploy
      - name: Build and Deploy to TestFlight/App Store
        if: inputs.environment == 'release' && inputs.publish == true
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: |
          cd ios
          echo "üöÄ Building and deploying Flutter iOS to App Store Connect..."
          
          # Pre-deploy validation
          echo "üìã Deployment configuration:"
          echo "- Target: ${{ inputs.branch }}"
          echo "- Version: ${{ inputs.version }}"
          echo "- Build: ${{ inputs.version_code }}"
          echo "- API Key ID: ${APP_STORE_CONNECT_API_KEY_ID:0:8}..."
          echo "- API Key Content: $([ -n "$APP_STORE_CONNECT_API_KEY_CONTENT" ] && echo "Available" || echo "Missing")"
          
          # Determine deployment track
          TRACK="TestFlight Internal"
          case "${{ inputs.branch }}" in
            "main") TRACK="App Store" ;;
            "staging") TRACK="TestFlight Beta" ;;
          esac
          echo "- Deployment track: $TRACK"
          
          # Deploy with Fastlane
          case "${{ inputs.branch }}" in
            "main") 
              FASTLANE_TARGET="app_store"
              ;;
            "staging") 
              FASTLANE_TARGET="testflight_beta"
              ;;
            *) 
              FASTLANE_TARGET="testflight_internal"
              ;;
          esac
          
          if bundle exec fastlane deploy target:$FASTLANE_TARGET version:"${{ inputs.version }}" build_number:"${{ inputs.version_code }}"; then
            echo "‚úÖ Flutter iOS deployment to $TRACK completed successfully"
          else
            echo "‚ùå Flutter iOS deployment failed"
            echo "üîç Fastlane logs:"
            find fastlane/logs -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "No Fastlane logs found"
            exit 1
          fi

      # üéØ Enhanced artifacts upload
      - name: Upload iOS Build Artifacts
        if: inputs.publish == false && inputs.environment == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ios-${{ inputs.environment }}-${{ inputs.version }}-${{ github.run_number }}
          path: |
            ios/build/*.ipa
            ios/build/*.dSYM.zip
            build.log
            ios/fastlane/logs/*.log
          retention-days: 7
          compression-level: 6

      # üéØ Enhanced build summary
      - name: Generate Build Summary
        if: always()
        run: |
          echo "## üçé Flutter iOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner:** ${{ runner.os }} ($(sw_vers -productVersion))" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Xcode:** $(xcodebuild -version | head -1)" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          if [ "${{ job.status }}" = "success" ]; then
            echo "- **Build Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # File sizes and details
          if [ -d "ios/build" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì¶ Build Artifacts" >> $GITHUB_STEP_SUMMARY
            
            for ipa in ios/build/*.ipa; do
              if [ -f "$ipa" ]; then
                ipa_name=$(basename "$ipa")
                ipa_size=$(ls -lh "$ipa" | awk '{print $5}')
                echo "- **$ipa_name:** $ipa_size" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # dSYM files
            for dsym in ios/build/*.dSYM.zip; do
              if [ -f "$dsym" ]; then
                dsym_name=$(basename "$dsym")
                dsym_size=$(ls -lh "$dsym" | awk '{print $5}')
                echo "- **$dsym_name:** $dsym_size" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          # Deployment info
          if [ "${{ inputs.publish }}" = "true" ]; then
            TRACK="TestFlight Internal"
            case "${{ inputs.branch }}" in
              "main") TRACK="App Store" ;;
              "staging") TRACK="TestFlight Beta" ;;
            esac
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üöÄ Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Target:** $TRACK" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ‚úÖ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.environment }}" = "release" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìÅ Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** Available for download" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance metrics
          if [ -f "build.log" ]; then
            if grep -q "Built" build.log; then
              build_time=$(grep "Built" build.log | tail -1 | grep -o '[0-9]*\.[0-9]*s' || echo "Unknown")
              if [ "$build_time" != "Unknown" ]; then
                echo "- **Build Time:** $build_time" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          
          # Cache effectiveness
          if [ "${{ steps.restore-deps-cache.outputs.cache-hit }}" = "true" ]; then
            echo "- **Cache:** ‚úÖ Hit (Dependencies restored)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Cache:** ‚ùå Miss (Fresh install)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      # üßπ Cleanup sensitive files
      - name: Cleanup Sensitive Files
        if: always()
        run: |
          # Clean up any temporary build files
          rm -rf ios/build/temp 2>/dev/null || true
          rm -rf ios/fastlane/tmp 2>/dev/null || true
          
          # Clean up Flutter build cache if needed
          flutter clean > /dev/null 2>&1 || true
          
          echo "‚úÖ Sensitive files cleaned up"