# .github/workflows/ios-reusable.yml - ‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
name: iOS Build & Deploy

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: 'development'
    secrets:
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_API_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true
      MATCH_PASSWORD:
        required: true
      MATCH_GIT_URL:
        required: true
      MATCH_PRIVATE_KEY:
        required: true
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 67000.0.0)'
        required: true
        default: '67000.0.0'
      version_code:
        description: 'Version code (e.g., 1)'
        required: true
        default: '1'
      branch:
        description: 'Branch name'
        required: true
        default: 'develop'
      environment:
        description: 'Environment'
        required: false
        default: 'development'

env:
  FLUTTER_VERSION: '3.32.2'
  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î minimum version (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ version ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô App Store)
  MIN_APP_STORE_VERSION: '66666.0.0'

jobs:
  build-and-deploy-ios:
    runs-on: macos-latest
    timeout-minutes: 35
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System Information
        run: |
          echo "üñ•Ô∏è System Information:"
          echo "- macOS: $(sw_vers -productVersion)"
          echo "- Xcode: $(xcodebuild -version | head -1)"
          echo "- Available space: $(df -h . | tail -1 | awk '{print $4}')"

      # üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç version format ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô version ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
      - name: Normalize Version Format
        id: version
        run: |
          INPUT_VERSION="${{ inputs.version }}"
          MIN_VERSION="${{ env.MIN_APP_STORE_VERSION }}"
          
          echo "üîç Original version: $INPUT_VERSION"
          echo "üìã Minimum required version: $MIN_VERSION"
          
          # Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö version
          version_compare() {
            if [[ $1 == $2 ]]; then echo 0; return; fi
            
            IFS='.' read -ra VER1 <<< "$1"
            IFS='.' read -ra VER2 <<< "$2"
            
            for i in {0..2}; do
              v1=${VER1[$i]:-0}
              v2=${VER2[$i]:-0}
              if (( v1 > v2 )); then echo 1; return; fi
              if (( v1 < v2 )); then echo -1; return; fi
            done
            echo 0
          }
          
          # ‡πÅ‡∏õ‡∏•‡∏á version format
          if [[ "$INPUT_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            # 4-part version: X.Y.Z.W -> X.Y.Z
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            BUILD_PART="${BASH_REMATCH[4]}"
            CLEAN_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "‚ö†Ô∏è 4-part version detected: $INPUT_VERSION ‚Üí $CLEAN_VERSION"
            echo "üí° Build part ($BUILD_PART) moved to metadata"
            
          elif [[ "$INPUT_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-(alpha|beta|rc)\.?([0-9]+)?$ ]]; then
            # Pre-release version: X.Y.Z-alpha.N -> X.Y.Z
            BASE_VERSION="${BASH_REMATCH[1]}"
            PRERELEASE="${BASH_REMATCH[2]}"
            PRERELEASE_NUMBER="${BASH_REMATCH[3]:-1}"
            CLEAN_VERSION="$BASE_VERSION"
            echo "‚ö†Ô∏è Pre-release version detected: $INPUT_VERSION ‚Üí $CLEAN_VERSION"
            echo "üí° Pre-release info ($PRERELEASE) moved to metadata"
            
          elif [[ "$INPUT_VERSION" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
            # 2-part version: X.Y -> X.Y.0
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            CLEAN_VERSION="$MAJOR.$MINOR.0"
            echo "‚ö†Ô∏è 2-part version detected: $INPUT_VERSION ‚Üí $CLEAN_VERSION"
            
          elif [[ "$INPUT_VERSION" =~ ^([0-9]+)$ ]]; then
            # 1-part version: X -> X.0.0
            MAJOR="${BASH_REMATCH[1]}"
            CLEAN_VERSION="$MAJOR.0.0"
            echo "‚ö†Ô∏è 1-part version detected: $INPUT_VERSION ‚Üí $CLEAN_VERSION"
            
          elif [[ "$INPUT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Valid 3-part version
            CLEAN_VERSION="$INPUT_VERSION"
            echo "‚úÖ Version format is valid: $CLEAN_VERSION"
            
          else
            # Invalid format - use smart default
            echo "‚ùå Invalid version format: $INPUT_VERSION"
            IFS='.' read -ra MIN_PARTS <<< "$MIN_VERSION"
            MAJOR=${MIN_PARTS[0]}
            MINOR=${MIN_PARTS[1]}
            PATCH=$((${MIN_PARTS[2]} + 1))
            CLEAN_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üìù Using smart default: $CLEAN_VERSION"
          fi
          
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ version ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ minimum ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          COMPARISON=$(version_compare "$CLEAN_VERSION" "$MIN_VERSION")
          
          if [[ $COMPARISON -le 0 ]]; then
            echo "‚ö†Ô∏è Version $CLEAN_VERSION is not greater than minimum $MIN_VERSION"
            
            # Auto-increment ‡∏à‡∏≤‡∏Å minimum version
            IFS='.' read -ra MIN_PARTS <<< "$MIN_VERSION"
            MAJOR=${MIN_PARTS[0]}
            MINOR=${MIN_PARTS[1]}
            PATCH=$((${MIN_PARTS[2]} + 1))
            
            CLEAN_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üîÑ Auto-incremented to: $CLEAN_VERSION"
            echo "üí° Reason: App Store requires version > $MIN_VERSION"
          fi
          
          # Final validation
          if [[ ! "$CLEAN_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Final validation failed for: $CLEAN_VERSION"
            echo "üìù Falling back to: 67000.0.0"
            CLEAN_VERSION="67000.0.0"
          fi
          
          # Additional numeric validation
          IFS='.' read -ra PARTS <<< "$CLEAN_VERSION"
          for i in {0..2}; do
            if [[ ! "${PARTS[$i]}" =~ ^[0-9]+$ ]] || [[ ${PARTS[$i]} -lt 0 ]]; then
              echo "‚ùå Invalid version part at position $i: ${PARTS[$i]}"
              CLEAN_VERSION="67000.0.0"
              break
            fi
          done
          
          echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "ORIGINAL_VERSION=$INPUT_VERSION" >> $GITHUB_OUTPUT
          echo "MIN_VERSION=$MIN_VERSION" >> $GITHUB_OUTPUT
          
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á build metadata
          if [[ "$INPUT_VERSION" != "$CLEAN_VERSION" ]]; then
            echo "BUILD_METADATA=Original: $INPUT_VERSION ‚Üí Normalized: $CLEAN_VERSION (Min: $MIN_VERSION)" >> $GITHUB_OUTPUT
          else
            echo "BUILD_METADATA=Version: $CLEAN_VERSION (Min: $MIN_VERSION)" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "üìã Version Summary:"
          echo "   Input:    $INPUT_VERSION"
          echo "   Output:   $CLEAN_VERSION"
          echo "   Minimum:  $MIN_VERSION"
          echo "   Status:   ‚úÖ Ready for App Store"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-flutter-ios-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ios-

      - name: Get Dependencies
        run: |
          echo "üì¶ Installing Flutter dependencies..."
          flutter pub get
          echo "‚úÖ Flutter dependencies installed"

      - name: Update Version
        run: |
          CLEAN_VERSION="${{ steps.version.outputs.CLEAN_VERSION }}"
          VERSION_CODE="${{ inputs.version_code }}"
          
          echo "üìù Updating version to: $CLEAN_VERSION+$VERSION_CODE"
          echo "üìã Original version: ${{ steps.version.outputs.ORIGINAL_VERSION }}"
          echo "üìã Build metadata: ${{ steps.version.outputs.BUILD_METADATA }}"
          
          # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pubspec.yaml ‡∏î‡πâ‡∏ß‡∏¢ clean version
          sed -i '' "s/^version: .*/version: $CLEAN_VERSION+$VERSION_CODE/" pubspec.yaml
          grep "^version:" pubspec.yaml
          echo "‚úÖ Version updated in pubspec.yaml"

      # üîë SETUP SSH FOR FASTLANE MATCH
      - name: Setup SSH for Match
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.MATCH_PRIVATE_KEY }}

      # üîç DEBUG SSH CONNECTION
      - name: Test SSH Connection to Match Repository
        run: |
          echo "üîç Testing SSH connection to Match repository..."
          ssh -T git@github.com || true
          echo "Testing access to: ${{ secrets.MATCH_GIT_URL }}"
          git ls-remote "${{ secrets.MATCH_GIT_URL }}" || true
          ssh-add -l || true

      - name: Verify App Store Connect API Configuration
        run: |
          echo "üîë Verifying App Store Connect API configuration..."
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
            echo "‚úÖ API Key ID: Available"
          else
            echo "‚ùå API Key ID: Missing"
          fi
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}" ]; then
            echo "‚úÖ Issuer ID: Available"
          else
            echo "‚ùå Issuer ID: Missing"
          fi
          
          if [ -n "${{ secrets.APP_STORE_CONNECT_API_KEY }}" ]; then
            if echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > /dev/null 2>&1; then
              echo "‚úÖ API Key Content: Available and valid base64"
              decoded_length=$(echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d | wc -c | tr -d ' ')
              echo "   Decoded length: $decoded_length characters"
            else
              echo "‚ùå API Key Content: Invalid base64 format"
            fi
          else
            echo "‚ùå API Key Content: Missing"
          fi

      - name: Install CocoaPods Dependencies
        run: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios
          
          if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
            echo "‚úÖ Pods cache found, verifying integrity..."
            pod install --deployment 2>/dev/null || {
              echo "‚ö†Ô∏è Cache invalid, reinstalling..."
              rm -rf Pods Podfile.lock
              pod install
            }
          else
            echo "üîÑ Installing fresh Pods..."
            pod install
          fi
          
          echo "‚úÖ CocoaPods installation completed"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      # üî® BUILD & DEPLOY WITH FASTLANE
      - name: Build and Deploy iOS
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          FL_UPDATE_PLIST_PATH: Runner/Info.plist
        run: |
          echo "üçé Building and deploying iOS..."
          
          # ‡πÉ‡∏ä‡πâ clean version
          CLEAN_VERSION="${{ steps.version.outputs.CLEAN_VERSION }}"
          VERSION_CODE="${{ inputs.version_code }}"
          ORIGINAL_VERSION="${{ steps.version.outputs.ORIGINAL_VERSION }}"
          
          # Determine deployment target based on branch
          case "${{ inputs.branch }}" in
            "main") 
              TARGET="app_store"
              echo "üè™ Target: App Store"
              ;;
            "staging") 
              TARGET="testflight_beta"
              echo "‚úàÔ∏è Target: TestFlight Beta"
              ;;
            *) 
              TARGET="testflight_internal"
              echo "üîí Target: TestFlight Internal"
              ;;
          esac
          
          # Pre-build validation
          echo "üìã Build configuration:"
          echo "- Target: $TARGET"
          echo "- Clean Version: $CLEAN_VERSION"
          echo "- Original Version: $ORIGINAL_VERSION"
          echo "- Build: $VERSION_CODE"
          echo "- Branch: ${{ inputs.branch }}"
          echo "- Minimum Version: ${{ steps.version.outputs.MIN_VERSION }}"
          echo "- API Key ID: ${APP_STORE_CONNECT_API_KEY_ID:0:8}..."
          echo "- API Key Content: $([ -n "$APP_STORE_CONNECT_API_KEY_CONTENT" ] && echo "Available" || echo "Missing")"
          
          # Deploy with Fastlane
          cd ios
          
          echo "üöÄ Starting deployment..."
          bundle exec fastlane deploy \
            target:$TARGET \
            version:"$CLEAN_VERSION" \
            build_number:"$VERSION_CODE" \
            original_version:"$ORIGINAL_VERSION"
          
          echo "‚úÖ iOS deployment completed!"

      - name: Verify Build Artifacts
        run: |
          echo "üîç Verifying build artifacts..."
          
          if find ios -name "*.ipa" -type f | head -1 | read ipa_file; then
            echo "‚úÖ IPA found: $ipa_file"
            ipa_size=$(ls -lh "$ipa_file" | awk '{print $5}')
            echo "   Size: $ipa_size"
          else
            echo "‚ö†Ô∏è No IPA file found (may be normal for direct upload)"
          fi
          
          if [ -d "ios/fastlane/logs" ]; then
            echo "üìã Fastlane logs available"
            ls -la ios/fastlane/logs/
          fi
          
          if [ -d "ios/build" ]; then
            echo "üì¶ Build directory contents:"
            ls -la ios/build/
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ steps.version.outputs.CLEAN_VERSION }}-${{ github.run_number }}
          path: |
            ios/build/
            ios/fastlane/logs/
            ios/*.ipa
          retention-days: 30

      - name: Build Summary
        run: |
          echo "## üçé iOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Clean Version:** ${{ steps.version.outputs.CLEAN_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Original Version:** ${{ steps.version.outputs.ORIGINAL_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Metadata:** ${{ steps.version.outputs.BUILD_METADATA }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Minimum Version:** ${{ steps.version.outputs.MIN_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner:** ${{ runner.os }} ($(sw_vers -productVersion))" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          
          case "${{ inputs.branch }}" in
            "main") echo "- **Target:** üè™ App Store" >> $GITHUB_STEP_SUMMARY ;;
            "staging") echo "- **Target:** ‚úàÔ∏è TestFlight Beta" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "- **Target:** üîí TestFlight Internal" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          if find ios -name "*.ipa" -type f | head -1 | read ipa_file; then
            size=$(ls -lh "$ipa_file" | awk '{print $5}')
            echo "- **IPA Size:** $size" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "ios/fastlane/logs/"*.log ]; then
            echo "- **Build Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ‚ö†Ô∏è Check logs" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up sensitive files..."
          rm -rf ios/build/temp 2>/dev/null || true
          rm -rf ios/fastlane/tmp 2>/dev/null || true
          echo "‚úÖ Cleanup completed"