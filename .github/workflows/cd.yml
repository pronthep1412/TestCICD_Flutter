# .github/workflows/cd.yml - Simplified Flutter Continuous Deployment
name: Flutter Continuous Deployment

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'lib/**'
      - 'android/**'
      - 'ios/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  # Quick setup and version generation
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      branch: ${{ github.ref_name }}
      is_production: ${{ steps.version.outputs.is_production }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Version
        id: version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          RUN_NUMBER="${{ github.run_number }}"
          
          # Get base version
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          
          # Generate version based on branch
          case "$BRANCH_NAME" in
            "main")
              VERSION="$BASE_VERSION"
              VERSION_CODE=$((2000000 + RUN_NUMBER))
              IS_PRODUCTION="true"
              ;;
            "staging")
              VERSION="$BASE_VERSION-beta.$RUN_NUMBER"
              VERSION_CODE=$((1500000 + RUN_NUMBER))
              IS_PRODUCTION="false"
              ;;
            *)
              VERSION="$BASE_VERSION-alpha.$RUN_NUMBER"
              VERSION_CODE=$((1000000 + RUN_NUMBER))
              IS_PRODUCTION="false"
              ;;
          esac
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "is_production=$IS_PRODUCTION" >> $GITHUB_OUTPUT
          
          echo "📋 Generated Version: $VERSION (code: $VERSION_CODE)"
          echo "🎯 Branch: $BRANCH_NAME (Production: $IS_PRODUCTION)"

      - name: Setup Summary
        run: |
          echo "## 🚀 Flutter CD Pipeline Started" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Code:** ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production:** ${{ steps.version.outputs.is_production }}" >> $GITHUB_STEP_SUMMARY

  # Platform-independent Android deployment
  deploy-android:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 25
    environment: 
      name: ${{ needs.setup.outputs.branch == 'main' && 'production' || needs.setup.outputs.branch }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/.android/build-cache
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      - name: Get Dependencies
        run: flutter pub get

      - name: Setup Android Signing
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks
          cat > android/key.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

      - name: Update Version
        run: |
          sed -i "s/^version: .*/version: ${{ needs.setup.outputs.version }}+${{ needs.setup.outputs.version_code }}/" pubspec.yaml

      - name: Build Android AAB
        run: |
          echo "🔨 Building Android AAB..."
          flutter build appbundle --release \
            --build-name="${{ needs.setup.outputs.version }}" \
            --build-number="${{ needs.setup.outputs.version_code }}"

      - name: Deploy to Google Play
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
        run: |
          # Setup Play Store credentials
          echo "$GOOGLE_PLAY_JSON_KEY" | base64 -d > android/google-play-key.json
          
          # Determine track
          TRACK="internal"
          case "${{ needs.setup.outputs.branch }}" in
            "main") TRACK="production" ;;
            "staging") TRACK="beta" ;;
          esac
          
          echo "📤 Deploying to $TRACK track..."
          
          # Use Fastlane or direct upload
          cd android
          bundle exec fastlane android deploy \
            track:$TRACK \
            aab:"../build/app/outputs/bundle/release/app-release.aab" \
            json_key:"google-play-key.json"

      - name: Android Summary
        run: |
          aab_size=$(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')
          
          echo "## 🤖 Android Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **AAB Size:** $aab_size" >> $GITHUB_STEP_SUMMARY
          echo "- **Track:** ${{ needs.setup.outputs.branch == 'main' && 'Production' || needs.setup.outputs.branch == 'staging' && 'Beta' || 'Internal' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Deployed" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -f android/app/keystore.jks
          rm -f android/key.properties
          rm -f android/google-play-key.json

  # Platform-independent iOS deployment
  deploy-ios:
    needs: setup
    runs-on: macos-latest
    timeout-minutes: 35
    environment: 
      name: ${{ needs.setup.outputs.branch == 'main' && 'production' || needs.setup.outputs.branch }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-flutter-ios-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ios-

      - name: Get Dependencies
        run: flutter pub get

      - name: Install iOS Dependencies
        run: cd ios && pod install

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      - name: Update Version
        run: |
          sed -i '' "s/^version: .*/version: ${{ needs.setup.outputs.version }}+${{ needs.setup.outputs.version_code }}/" pubspec.yaml

      - name: Setup App Store Connect API
        run: |
          mkdir -p /tmp/ios-keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > /tmp/ios-keys/AuthKey.p8

      - name: Build and Deploy iOS
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_PATH: /tmp/ios-keys/AuthKey.p8
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: |
          cd ios
          
          # Determine deployment target
          TARGET="testflight_internal"
          case "${{ needs.setup.outputs.branch }}" in
            "main") TARGET="app_store" ;;
            "staging") TARGET="testflight_beta" ;;
          esac
          
          echo "🚀 Building and deploying to $TARGET..."
          
          # Build and deploy with Fastlane
          bundle exec fastlane ios deploy \
            target:$TARGET \
            version:"${{ needs.setup.outputs.version }}" \
            build_number:"${{ needs.setup.outputs.version_code }}"

      - name: iOS Summary
        run: |
          echo "## 🍎 iOS Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** ${{ needs.setup.outputs.branch == 'main' && 'App Store' || needs.setup.outputs.branch == 'staging' && 'TestFlight Beta' || 'TestFlight Internal' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Deployed" >> $GITHUB_STEP_SUMMARY
          
          # Show build artifacts if available
          if [ -d "build" ]; then
            for ipa in build/*.ipa; do
              if [ -f "$ipa" ]; then
                ipa_size=$(ls -lh "$ipa" | awk '{print $5}')
                echo "- **IPA Size:** $ipa_size" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

      - name: Cleanup
        if: always()
        run: rm -rf /tmp/ios-keys

  # Create GitHub release for production
  create-release:
    needs: [setup, deploy-android, deploy-ios]
    if: needs.setup.outputs.is_production == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG_NAME="v${{ needs.setup.outputs.version }}"
          
          if ! git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "✅ Created tag: $TAG_NAME"
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          release_name: 'Release v${{ needs.setup.outputs.version }}'
          body: |
            ## 🚀 Flutter Release v${{ needs.setup.outputs.version }}
            
            ### 📱 Deployments
            - **Android:** ✅ Google Play Store (Production)
            - **iOS:** ✅ App Store
            
            ### 📋 Details
            - **Version Code:** ${{ needs.setup.outputs.version_code }}
            - **Commit:** ${{ github.sha }}
            - **Flutter:** ${{ env.FLUTTER_VERSION }}
            
            ### 🔗 Links
            - [Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false

  # Final summary
  deployment-summary:
    needs: [setup, deploy-android, deploy-ios]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Final Summary
        run: |
          echo "## 🎉 Flutter Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ needs.setup.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Android:** ${{ needs.deploy-android.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS:** ${{ needs.deploy-ios.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          
          # Deployment tracks
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Deployment Tracks" >> $GITHUB_STEP_SUMMARY
          case "${{ needs.setup.outputs.branch }}" in
            "main")
              echo "- **Android:** Google Play Store (Production)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** App Store" >> $GITHUB_STEP_SUMMARY
              ;;
            "staging")
              echo "- **Android:** Google Play (Beta)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** TestFlight (Beta)" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "- **Android:** Google Play (Internal)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** TestFlight (Internal)" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed on $(date)*" >> $GITHUB_STEP_SUMMARY