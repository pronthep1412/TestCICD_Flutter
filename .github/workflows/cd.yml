# .github/workflows/cd.yml - Main Orchestrator
name: Flutter Continuous Deployment

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'lib/**'
      - 'android/**'
      - 'ios/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      branch: ${{ github.ref_name }}
      is_production: ${{ steps.version.outputs.is_production }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Version
        id: version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          RUN_NUMBER="${{ github.run_number }}"
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          
          case "$BRANCH_NAME" in
            "main")
              VERSION="$BASE_VERSION"
              VERSION_CODE=$((2000000 + RUN_NUMBER))
              IS_PRODUCTION="true"
              ;;
            "staging")
              VERSION="$BASE_VERSION-beta.$RUN_NUMBER"
              VERSION_CODE=$((1500000 + RUN_NUMBER))
              IS_PRODUCTION="false"
              ;;
            *)
              VERSION="$BASE_VERSION-alpha.$RUN_NUMBER"
              VERSION_CODE=$((1000000 + RUN_NUMBER))
              IS_PRODUCTION="false"
              ;;
          esac
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "is_production=$IS_PRODUCTION" >> $GITHUB_OUTPUT

  # Call reusable workflows (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
  # deploy-android:
  #   needs: setup
  #   uses: ./.github/workflows/flutter-android-build.yml
  #   with:
  #     version: ${{ needs.setup.outputs.version }}
  #     version_code: ${{ needs.setup.outputs.version_code }}
  #     branch: ${{ needs.setup.outputs.branch }}
  #     is_production: ${{ needs.setup.outputs.is_production }}
  #   secrets: inherit

  deploy-ios:
    needs: setup
    uses: ./.github/workflows/flutter-ios-build.yml
    with:
      version: ${{ needs.setup.outputs.version }}
      version_code: ${{ needs.setup.outputs.version_code }}
      branch: ${{ needs.setup.outputs.branch }}
      is_production: ${{ needs.setup.outputs.is_production }}
    secrets: inherit

  # create-release:
  #   needs: [setup, deploy-android, deploy-ios]
  #   if: needs.setup.outputs.is_production == 'true'
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Create GitHub Release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ needs.setup.outputs.version }}
  #         release_name: 'Release v${{ needs.setup.outputs.version }}'
  #         body: |
  #           ## üöÄ Flutter Release v${{ needs.setup.outputs.version }}
  #           - **Android:** ‚úÖ Google Play Store
  #           - **iOS:** ‚úÖ App Store