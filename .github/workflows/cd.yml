# cd.yml - Flutter Continuous Deployment with Build Artifacts Sharing
name: Flutter Continuous Deployment

on:
  push:
    branches:
      - master
      - develop
      - preprod

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  # Common setup, testing, and build artifacts creation
  setup-test-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      branch: ${{ steps.branch.outputs.name }}
      is_production: ${{ steps.branch.outputs.is_production }}
      cache_key: ${{ steps.cache-info.outputs.key }}
      cache_hit: ${{ steps.cache-deps.outputs.cache-hit }}
      coverage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      # 🚀 Enhanced dependency caching
      - name: Cache Flutter Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/.android/build-cache
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      - name: Cache Debug Info
        run: |
          echo "🔍 Cache Debug Information:"
          echo "- Cache Key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.lock') }}"
          echo "- Cache Hit: ${{ steps.cache-deps.outputs.cache-hit }}"
          echo "- Cache Primary Key: ${{ steps.cache-deps.outputs.cache-primary-key }}"
          echo "- Cache Matched Key: ${{ steps.cache-deps.outputs.cache-matched-key }}"
          echo "- Pubspec Lock Hash: ${{ hashFiles('pubspec.lock') }}"
          
          # Check pub cache
          if [ -d "$PUB_CACHE" ]; then
            echo "- Pub cache exists: $(du -sh $PUB_CACHE | cut -f1)"
          else
            echo "- Pub cache: Not found"
          fi

      - name: Get Flutter Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          flutter pub get
          echo "✅ Dependencies installed"

      # Quality Checks
      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Code Analysis (Dart Analyze)
        run: |
          echo "## 🔍 Flutter Code Analysis Results" >> $GITHUB_STEP_SUMMARY
          if flutter analyze --no-congratulate; then
            echo "✅ No analysis issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Analysis issues detected - check logs for details" >> $GITHUB_STEP_SUMMARY
            flutter analyze --no-congratulate || true
          fi

      - name: Code Formatting Check
        run: |
          echo "## 📝 Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          if dart format --set-exit-if-changed .; then
            echo "✅ All files are properly formatted" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some files need formatting" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Unit & Widget Tests with Coverage
        run: flutter test --coverage --reporter=expanded

      # 🆕 Extract coverage for reporting
      - name: Extract Coverage Percentage
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/lcov.info" ]; then
            # Install lcov for coverage calculation
            sudo apt-get update && sudo apt-get install -y lcov
            COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | grep 'lines' | grep -o '[0-9.]*%' | head -1 | sed 's/%//' || echo "0")
          fi
          
          # Validate และ fallback
          if ! echo "$COVERAGE" | grep -q '^[0-9]*\.*[0-9]*$'; then
            COVERAGE="0"
          fi
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
            COVERAGE="0"
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Set Branch Info
        id: branch
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "is_production=$([[ '$BRANCH_NAME' == 'master' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME (Production: $([[ '$BRANCH_NAME' == 'master' ]] && echo 'Yes' || echo 'No'))"

      - name: Generate Version and Version Code
        id: version
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          RUN_NUMBER=${{ github.run_number }}
          
          # Get base version from pubspec.yaml
          if [ -f "pubspec.yaml" ]; then
            PACKAGE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          else
            PACKAGE_VERSION="1.0.0"
          fi
          
          # Generate version name
          if [ "$BRANCH_NAME" = "master" ]; then
            VERSION="$PACKAGE_VERSION"
            BASE_CODE=2000000
          elif [ "$BRANCH_NAME" = "preprod" ]; then
            VERSION="$PACKAGE_VERSION-beta.$RUN_NUMBER"
            BASE_CODE=1500000
          else
            VERSION="$PACKAGE_VERSION-alpha.$RUN_NUMBER"
            BASE_CODE=1000000
          fi
          
          # Generate unique version code
          VERSION_CODE=$((BASE_CODE + RUN_NUMBER))
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION (code: $VERSION_CODE)"

      # 🆕 Create Flutter build artifacts for sharing
      - name: Create Flutter Build Artifacts for Sharing
        run: |
          echo "📦 Creating Flutter build artifacts for deployment..."
          
          # Android artifacts
          mkdir -p artifacts/android
          flutter build appbundle --release --build-name="${{ steps.version.outputs.version }}" --build-number="${{ steps.version.outputs.version_code }}"
          cp build/app/outputs/bundle/release/app-release.aab artifacts/android/
          
          # Also create APK for testing
          flutter build apk --release --build-name="${{ steps.version.outputs.version }}" --build-number="${{ steps.version.outputs.version_code }}"
          cp build/app/outputs/flutter-apk/app-release.apk artifacts/android/
          
          # iOS artifacts (skip on Linux)
          mkdir -p artifacts/ios
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            flutter build ios --release --no-codesign --build-name="${{ steps.version.outputs.version }}" --build-number="${{ steps.version.outputs.version_code }}"
            cp -r build/ios/iphoneos/Runner.app artifacts/ios/
          else
            echo "iOS build skipped on Linux runner" > artifacts/ios/README.txt
          fi
          
          echo "✅ Flutter build artifacts created successfully"

      # 🆕 Upload artifacts for builds
      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cd-flutter-android-artifacts-${{ github.run_number }}
          path: artifacts/android/
          retention-days: 1

      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cd-flutter-ios-artifacts-${{ github.run_number }}
          path: artifacts/ios/
          retention-days: 1

      # 🆕 Coverage and test reports
      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cd-flutter-coverage-reports-${{ github.run_number }}
          path: |
            coverage/
            test/
          retention-days: 7

      # 🆕 Build summary
      - name: Setup Summary
        run: |
          echo "## 🚀 Flutter Continuous Deployment - Setup Phase" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ steps.branch.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production:** ${{ steps.branch.outputs.is_production }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies installed and cached" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- Unit/Widget tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter build artifacts created and uploaded" >> $GITHUB_STEP_SUMMARY

  # 🆕 Build analysis for Flutter
  build-analysis:
    needs: setup-test-and-prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    
    steps:
      - name: Download Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: cd-flutter-android-artifacts-${{ github.run_number }}
          path: ./build-check/

      - name: Flutter Build Size Analysis
        run: |
          echo "## 📦 Production Flutter Build Analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "./build-check/app-release.aab" ]; then
            aab_size=$(ls -lh ./build-check/app-release.aab | awk '{print $5}')
            aab_bytes=$(wc -c < ./build-check/app-release.aab)
            
            echo "- **✅ Build Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Android AAB Size:** $aab_size" >> $GITHUB_STEP_SUMMARY
            
            # Size evaluation with production standards for Flutter
            if [ "$aab_bytes" -lt 10485760 ]; then
              echo "- **📊 Size Status:** ✅ Excellent (< 10MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$aab_bytes" -lt 20971520 ]; then
              echo "- **📊 Size Status:** ✅ Good (< 20MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$aab_bytes" -lt 52428800 ]; then
              echo "- **📊 Size Status:** ⚠️ Large (< 50MB)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **📊 Size Status:** ❌ Too Large (> 50MB) - Consider optimization" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **⚠️ Build Analysis:** AAB file not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "./build-check/app-release.apk" ]; then
            apk_size=$(ls -lh ./build-check/app-release.apk | awk '{print $5}')
            echo "- **Android APK Size:** $apk_size" >> $GITHUB_STEP_SUMMARY
          fi

  # Create release tag (for production)
  create-release-tag:
    needs: [setup-test-and-prepare, build-analysis]
    if: needs.setup-test-and-prepare.outputs.is_production == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and Push Release Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG_NAME="v${{ needs.setup-test-and-prepare.outputs.version }}"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "⚠️ Tag $TAG_NAME already exists, skipping..."
          else
            git tag -a "$TAG_NAME" -m "Flutter production release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "✅ Created and pushed tag: $TAG_NAME"
          fi

  # Android deployment with optimization
  deploy-android:
    needs: setup-test-and-prepare
    uses: ./.github/workflows/flutter-android-build.yml
    with:
      environment: 'release'
      publish: true
      version: ${{ needs.setup-test-and-prepare.outputs.version }}
      version_code: ${{ needs.setup-test-and-prepare.outputs.version_code }}
      branch: ${{ needs.setup-test-and-prepare.outputs.branch }}
      cache_key: ${{ needs.setup-test-and-prepare.outputs.cache_key }}
      build_artifacts: cd-flutter-android-artifacts-${{ github.run_number }}
    secrets: inherit

  # iOS deployment with optimization
  deploy-ios:
    needs: setup-test-and-prepare
    uses: ./.github/workflows/flutter-ios-build.yml
    with:
      environment: 'release'
      publish: true
      version: ${{ needs.setup-test-and-prepare.outputs.version }}
      version_code: ${{ needs.setup-test-and-prepare.outputs.version_code }}
      branch: ${{ needs.setup-test-and-prepare.outputs.branch }}
      cache_key: ${{ needs.setup-test-and-prepare.outputs.cache_key }}
      build_artifacts: cd-flutter-ios-artifacts-${{ github.run_number }}
    secrets: inherit

  # Production deployment with manual approval
  finalize-production-release:
    if: needs.setup-test-and-prepare.outputs.is_production == 'true'
    needs: [setup-test-and-prepare, deploy-android, deploy-ios, create-release-tag, build-analysis]
    runs-on: ubuntu-latest
    environment: production  # This triggers manual approval
    
    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.setup-test-and-prepare.outputs.version }}
          release_name: 'Flutter Production Release v${{ needs.setup-test-and-prepare.outputs.version }}'
          body: |
            ## 🚀 Flutter Production Release v${{ needs.setup-test-and-prepare.outputs.version }}
            
            ### 📋 Release Information
            - **Version:** v${{ needs.setup-test-and-prepare.outputs.version }}
            - **Version Code:** ${{ needs.setup-test-and-prepare.outputs.version_code }}
            - **Branch:** ${{ needs.setup-test-and-prepare.outputs.branch }}
            - **Deployed by:** ${{ github.actor }}
            - **Commit:** ${{ github.sha }}
            - **Test Coverage:** ${{ needs.setup-test-and-prepare.outputs.coverage }}%
            - **Flutter Version:** ${{ env.FLUTTER_VERSION }}
            
            ### ✅ Quality Checks Passed
            - Code analysis (dart analyze)
            - Code formatting check
            - Unit and widget tests
            - Build size analysis
            
            ### 📱 Platform Deployments
            - **Android:** ${{ needs.deploy-android.result == 'success' && '✅ Deployed to Google Play' || '❌ Failed' }}
            - **iOS:** ${{ needs.deploy-ios.result == 'success' && '✅ Deployed to App Store' || '❌ Failed' }}
            
            ### 🔗 Links
            - [Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Production Release Summary
        run: |
          echo "## 🎉 Flutter Production Release Completed" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v${{ needs.setup-test-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Deploy:** ${{ needs.deploy-android.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Deploy:** ${{ needs.deploy-ios.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** ✅ Created" >> $GITHUB_STEP_SUMMARY

  # 🆕 Deployment summary for all branches
  deployment-summary:
    needs: [setup-test-and-prepare, deploy-android, deploy-ios, build-analysis]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Flutter Continuous Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ needs.setup-test-and-prepare.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.setup-test-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ needs.setup-test-and-prepare.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage:** ${{ needs.setup-test-and-prepare.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter Version:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup & Tests:** ${{ needs.setup-test-and-prepare.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Analysis:** ${{ needs.build-analysis.result == 'success' && '✅ Completed' || '⚠️ Partial' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Deploy:** ${{ needs.deploy-android.result == 'success' && '✅ Success' || needs.deploy-android.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Deploy:** ${{ needs.deploy-ios.result == 'success' && '✅ Success' || needs.deploy-ios.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment track info
          BRANCH="${{ needs.setup-test-and-prepare.outputs.branch }}"
          case "$BRANCH" in
            "master")
              echo "### 🎯 Production Deployment" >> $GITHUB_STEP_SUMMARY
              echo "- **Android:** Google Play Store (Production)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** App Store (Production)" >> $GITHUB_STEP_SUMMARY
              ;;
            "preprod")
              echo "### 🧪 Pre-Production Deployment" >> $GITHUB_STEP_SUMMARY
              echo "- **Android:** Google Play (Alpha Track)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** TestFlight (Beta)" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "### 🔬 Development Deployment" >> $GITHUB_STEP_SUMMARY
              echo "- **Android:** Google Play (Internal Track)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** TestFlight (Internal)" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Flutter deployment completed on $(date)*" >> $GITHUB_STEP_SUMMARY