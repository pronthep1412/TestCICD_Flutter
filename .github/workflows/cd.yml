# .github/workflows/cd.yml - Complete Flutter CD Pipeline
name: Flutter Continuous Deployment

on:
  push:
    branches:
      - master
      - develop
      - preprod
    paths:
      - "lib/**"
      - "android/**"
      - "ios/**"
      - "pubspec.*"

  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "develop"
        type: choice
        options:
          - master
          - develop
          - preprod
      force_version:
        description: "Force specific version (optional)"
        required: false

permissions:
  contents: write
  pull-requests: read
  actions: read

env:
  FLUTTER_VERSION: "3.32.2"

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      branch: ${{ steps.version.outputs.branch }}
      environment: ${{ steps.version.outputs.environment }}
      is_production: ${{ steps.version.outputs.is_production }}
      deploy_android: ${{ steps.changes.outputs.deploy_android }}
      deploy_ios: ${{ steps.changes.outputs.deploy_ios }}

    steps:
      #ดึงโค้ดใน git มาประมวลผล
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #ตรวจสอบว่าการทำงานของ workflow นี้ถูกเรียกใช้จาก branch ไหน
      - name: Determine Branch
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH="${{ inputs.branch }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "🌟 Target branch: $BRANCH"

      #วิเคราะห์ว่ามีการเปลี่ยนแปลงเกิดขึ้นกับโค้ดส่วนไหนบ้าง
      - name: Analyze Changes
        id: changes
        run: |
          echo "🔍 Analyzing changes..."

          # For manual dispatch, deploy both
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "deploy_android=true" >> $GITHUB_OUTPUT
            echo "deploy_ios=true" >> $GITHUB_OUTPUT
            echo "📱 Manual deploy: Android + iOS"
            exit 0
          fi

          # Check changed files
          git diff --name-only HEAD~1 HEAD > changed_files.txt

          # Check if Android/iOS specific changes
          ANDROID_CHANGED="false"
          IOS_CHANGED="false"

          if grep -E "(android/|\.gradle|build\.gradle)" changed_files.txt > /dev/null; then
            ANDROID_CHANGED="true"
          fi

          if grep -E "(ios/|\.podspec|Podfile)" changed_files.txt > /dev/null; then
            IOS_CHANGED="true"
          fi

          # If core changes, deploy both
          if grep -E "(lib/|pubspec\.(yaml|lock))" changed_files.txt > /dev/null; then
            ANDROID_CHANGED="true"
            IOS_CHANGED="true"
          fi

          echo "deploy_android=$ANDROID_CHANGED" >> $GITHUB_OUTPUT
          echo "deploy_ios=$IOS_CHANGED" >> $GITHUB_OUTPUT

          echo "📱 Deploy Android: $ANDROID_CHANGED"
          echo "🍎 Deploy iOS: $IOS_CHANGED"

      #สร้าง version number อัพ store
      - name: Generate Version
        id: version
        run: |
          BRANCH="${{ steps.branch.outputs.branch }}"
          RUN_NUMBER="${{ github.run_number }}"
          OFFSET_START=1000400 

          # Get base version from pubspec.yaml (ignore +build part)
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)

          # Override with manual version if provided
          if [ -n "${{ inputs.force_version }}" ]; then
            BASE_VERSION="${{ inputs.force_version }}"
            echo "🔧 Using forced version: $BASE_VERSION"
          fi

          VERSION="$BASE_VERSION"

          # 🤖 FULL AUTO STRATEGY: Both platforms use auto-increment
          case "$BRANCH" in
            "master")
              # Production: High range for both
              VERSION_CODE=$((OFFSET_START + RUN_NUMBER))
              ENVIRONMENT="production"
              IS_PRODUCTION="true"
              ;;
            "preprod")
              # Staging: Mid range for both
              VERSION_CODE=$((OFFSET_START + RUN_NUMBER))
              ENVIRONMENT="staging"
              IS_PRODUCTION="false"
              ;;
            *)
              # Development: Low range for both
              VERSION_CODE=$((OFFSET_START + RUN_NUMBER))
              ENVIRONMENT="development"
              IS_PRODUCTION="false"
              ;;
          esac

          # Same version code for both platforms
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "is_production=$IS_PRODUCTION" >> $GITHUB_OUTPUT

          echo "📋 Full Auto Version Strategy:"
          echo "- App Version: $VERSION"
          echo "- Version Code: $VERSION_CODE (auto for both iOS & Android)"
          echo "- Environment: $ENVIRONMENT"
          echo "- Run Number: $RUN_NUMBER"

      #สรุปผล
      - name: Setup Summary
        run: |
          echo "## 🚀 Flutter CD Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ steps.version.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ steps.version.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Deploy:** ${{ steps.changes.outputs.deploy_android }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Deploy:** ${{ steps.changes.outputs.deploy_ios }}" >> $GITHUB_STEP_SUMMARY

  #อนุมัติการอัพขึ้น store และสร้าง version
  production-approval:
    needs: setup
    if: needs.setup.outputs.is_production == 'true'
    runs-on: ubuntu-latest
    environment:
      name: production-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Production Deployment Approval
        run: |
          echo "🚨 Production deployment requires manual approval"
          echo "- Version: ${{ needs.setup.outputs.version }}"
          echo "- Branch: ${{ needs.setup.outputs.branch }}"
          echo "✅ Approved for production deployment"

  # Build deploy for Android
  deploy-android:
    needs: [setup, production-approval]
    if: |
      always() && 
      needs.setup.outputs.deploy_android == 'true' && 
      (needs.setup.outputs.is_production != 'true' || needs.production-approval.result == 'success')
    uses: ./.github/workflows/android-build.yml
    with:
      version: ${{ needs.setup.outputs.version }}
      version_code: ${{ needs.setup.outputs.version_code }}
      branch: ${{ needs.setup.outputs.branch }}
      environment: ${{ needs.setup.outputs.environment }}
    secrets: inherit

  # Build deploy for IOS
  deploy-ios:
    needs: [setup, production-approval]
    if: |
      always() && 
      needs.setup.outputs.deploy_ios == 'true' && 
      (needs.setup.outputs.is_production != 'true' || needs.production-approval.result == 'success')
    uses: ./.github/workflows/ios-build.yml
    with:
      version: ${{ needs.setup.outputs.version }}
      version_code: ${{ needs.setup.outputs.version_code }}
      branch: ${{ needs.setup.outputs.branch }}
      environment: ${{ needs.setup.outputs.environment }}
    secrets: inherit

  #สร้าง GitHub Release สำหรับ production
  create-release:
    needs: [setup, deploy-android, deploy-ios]
    if: |
      always() && 
      needs.setup.outputs.is_production == 'true' && 
      (needs.deploy-android.result == 'success' || needs.deploy-android.result == 'skipped') &&
      (needs.deploy-ios.result == 'success' || needs.deploy-ios.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and Push Release Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          TAG_NAME="v${{ needs.setup.outputs.version }}"

          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "⚠️ Tag $TAG_NAME already exists, skipping..."
          else
            git tag -a "$TAG_NAME" -m "Production release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "✅ Created and pushed tag: $TAG_NAME"
          fi

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ needs.setup.outputs.version }}"

          # Generate changelog from commits
          echo "## 🚀 Flutter Production Release v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### � Release Information" >> release_notes.md
          echo "- **Version:** v$VERSION" >> release_notes.md
          echo "- **Version Code:** ${{ needs.setup.outputs.version_code }}" >> release_notes.md
          echo "- **Branch:** ${{ needs.setup.outputs.branch }}" >> release_notes.md
          echo "- **Deployed by:** ${{ github.actor }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### �📱 Platform Availability" >> release_notes.md

          if [ "${{ needs.deploy-android.result }}" = "success" ]; then
            echo "- **Android**: ✅ Google Play Store" >> release_notes.md
          fi

          if [ "${{ needs.deploy-ios.result }}" = "success" ]; then
            echo "- **iOS**: ✅ App Store Connect (TestFlight)" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "### 📝 Recent Changes" >> release_notes.md

          # Get recent commits
          git log --oneline --no-merges -10 --pretty="- %s" >> release_notes.md

          echo "" >> release_notes.md
          echo "*Released on $(date)*" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          name: "Flutter Production Release v${{ needs.setup.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false

  #สรุปการ deploy
  deployment-summary:
    needs: [setup, deploy-android, deploy-ios, create-release]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate Summary
        run: |
          echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Target Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ needs.setup.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📱 Platform Results" >> $GITHUB_STEP_SUMMARY

          # Android status
          ANDROID_STATUS="${{ needs.deploy-android.result }}"
          case "$ANDROID_STATUS" in
            "success") echo "- **Android:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "- **Android:** ⏭️ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "- **Android:** ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "- **Android:** ⏸️ Not triggered" >> $GITHUB_STEP_SUMMARY ;;
          esac

          # iOS status  
          IOS_STATUS="${{ needs.deploy-ios.result }}"
          case "$IOS_STATUS" in
            "success") echo "- **iOS:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "- **iOS:** ⏭️ Skipped (no changes)" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "- **iOS:** ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "- **iOS:** ⏸️ Not triggered" >> $GITHUB_STEP_SUMMARY ;;
          esac

          # Release status
          if [ "${{ needs.setup.outputs.is_production }}" = "true" ]; then
            RELEASE_STATUS="${{ needs.create-release.result }}"
            case "$RELEASE_STATUS" in
              "success") echo "- **GitHub Release:** ✅ Created" >> $GITHUB_STEP_SUMMARY ;;
              *) echo "- **GitHub Release:** ❌ Failed" >> $GITHUB_STEP_SUMMARY ;;
            esac
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Final Status Check
        run: |
          ANDROID_OK="${{ needs.deploy-android.result }}"
          IOS_OK="${{ needs.deploy-ios.result }}"

          # Check if any required deployment failed
          if [ "$ANDROID_OK" = "failure" ] || [ "$IOS_OK" = "failure" ]; then
            echo "❌ Some deployments failed"
            exit 1
          else
            echo "✅ All deployments completed successfully"
          fi
