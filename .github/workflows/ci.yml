# .github/workflows/ci.yml - Flutter Pull Request Testing
name: Flutter CI - Pull Request Testing

on:
  pull_request:
    branches: [main, develop, staging]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'lib/**'
      - 'test/**'
      - 'android/**'
      - 'ios/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
      - '.github/workflows/**'

# Cancel previous runs when new commits are pushed
concurrency:
  group: ci-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.24.0'

jobs:
  # Quick validation and setup
  validate-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      should_build: ${{ steps.changes.outputs.should_build }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Changes
        id: changes
        run: |
          echo "üîç Analyzing PR changes..."
          
          # Get changed files
          git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
          
          # Check if builds are needed
          if grep -E '\.(dart|yaml|lock)$|android/|ios/' changed_files.txt > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "üì± Code changes detected - builds will be validated"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "üìù Documentation-only changes - builds skipped"
          fi
          
          # Show change summary
          echo "üìä Change Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- **Dart files:** $(grep '\.dart$' changed_files.txt | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Test files:** $(grep '^test/' changed_files.txt | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Android files:** $(grep '^android/' changed_files.txt | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS files:** $(grep '^ios/' changed_files.txt | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Config files:** $(grep -E '\.(yaml|lock)$' changed_files.txt | wc -l)" >> $GITHUB_STEP_SUMMARY

      - name: Generate PR Version
        id: version
        run: |
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          PR_VERSION="$BASE_VERSION-pr.${{ github.event.number }}"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "üìã PR Version: $PR_VERSION"

  # Core testing and quality checks
  test-and-quality:
    needs: validate-pr
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-flutter-ci-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ci-

      - name: Get Dependencies
        run: |
          echo "üì¶ Installing Flutter dependencies..."
          flutter pub get
          echo "‚úÖ Dependencies installed"

      - name: Flutter Doctor
        run: |
          echo "üè• Running Flutter doctor..."
          flutter doctor -v

      - name: Code Analysis
        run: |
          echo "üîç Running code analysis..." >> $GITHUB_STEP_SUMMARY
          echo "## üîç Code Analysis Results" >> $GITHUB_STEP_SUMMARY
          
          if flutter analyze --no-congratulate > analysis-results.txt 2>&1; then
            echo "‚úÖ No analysis issues found" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Code analysis passed"
          else
            echo "‚ö†Ô∏è Analysis issues detected:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 analysis-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Code analysis found issues"
            cat analysis-results.txt
            exit 1
          fi

      - name: Code Formatting Check
        run: |
          echo "## üìù Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          
          if dart format --set-exit-if-changed . > format-results.txt 2>&1; then
            echo "‚úÖ All files are properly formatted" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Code formatting passed"
          else
            echo "‚ö†Ô∏è Some files need formatting:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 format-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "üí° Run 'dart format .' to fix formatting issues" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Code formatting check failed"
            cat format-results.txt
            exit 1
          fi

      - name: Run Tests with Coverage
        run: |
          echo "üß™ Running Flutter tests with coverage..."
          echo "## üß™ Test Results" >> $GITHUB_STEP_SUMMARY
          
          if flutter test --coverage --reporter=expanded > test-results.txt 2>&1; then
            echo "‚úÖ All tests passed" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Tests passed"
            
            # Show test summary
            if grep -q "All tests passed" test-results.txt; then
              test_count=$(grep -o "All [0-9]* tests passed" test-results.txt | grep -o "[0-9]*" || echo "unknown")
              echo "- **Total Tests:** $test_count" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Some tests failed:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -30 test-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Tests failed"
            cat test-results.txt
            exit 1
          fi

      - name: Calculate Test Coverage
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/lcov.info" ]; then
            echo "üìä Calculating test coverage..."
            sudo apt-get update && sudo apt-get install -y lcov >/dev/null 2>&1
            COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | \
                      grep 'lines' | grep -o '[0-9.]*%' | head -1 | sed 's/%//' || echo "0")
          fi
          
          # Validate coverage value
          if ! echo "$COVERAGE" | grep -q '^[0-9]*\.*[0-9]*$'; then
            COVERAGE="0"
          fi
          
          echo "percentage=${COVERAGE:-0}" >> $GITHUB_OUTPUT
          echo "üìä Test Coverage: ${COVERAGE:-0}%"

      - name: Coverage Report
        run: |
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ "${COVERAGE:-0}" = "0" ]; then
            echo "- **Status:** ‚ö†Ô∏è No unit tests found" >> $GITHUB_STEP_SUMMARY
            echo "- **Recommendation:** Consider adding unit tests for better code quality" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 80) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** ‚úÖ Excellent coverage (‚â•80%)" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 70) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** ‚úÖ Good coverage (‚â•70%)" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 50) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** ‚ö†Ô∏è Moderate coverage (‚â•50%)" >> $GITHUB_STEP_SUMMARY
            echo "- **Recommendation:** Consider improving test coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ‚ùå Low coverage (<50%)" >> $GITHUB_STEP_SUMMARY
            echo "- **Recommendation:** Significantly improve test coverage" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-pr-${{ github.event.number }}
          path: |
            coverage/
            test-results.txt
            analysis-results.txt
            format-results.txt
          retention-days: 7

  # Build validation (only if code changes detected)
  validate-android-build:
    needs: [validate-pr, test-and-quality]
    if: needs.validate-pr.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Get Dependencies
        run: flutter pub get

      - name: Validate Android Debug Build
        run: |
          echo "ü§ñ Validating Android debug build..."
          flutter build apk --debug \
            --build-name="${{ needs.validate-pr.outputs.pr_version }}" \
            --build-number=99
          
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            apk_size=$(ls -lh build/app/outputs/flutter-apk/app-debug.apk | awk '{print $5}')
            echo "‚úÖ Android debug build successful: $apk_size"
            echo "- **Android Debug APK:** $apk_size" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Android debug build failed!"
            exit 1
          fi

      - name: Validate Android Release Build
        run: |
          echo "ü§ñ Validating Android release build..."
          flutter build appbundle --release \
            --build-name="${{ needs.validate-pr.outputs.pr_version }}" \
            --build-number=99
          
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            aab_size=$(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "‚úÖ Android release build successful: $aab_size"
            echo "- **Android Release AAB:** $aab_size" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Android release build failed!"
            exit 1
          fi

  # iOS build validation (only if code changes detected)
  validate-ios-build:
    needs: [validate-pr, test-and-quality]
    if: needs.validate-pr.outputs.should_build == 'true'
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Dependencies
        run: flutter pub get

      - name: Install CocoaPods Dependencies
        run: |
          cd ios
          echo "üì± Installing CocoaPods dependencies..."
          pod install
          echo "‚úÖ CocoaPods installation completed"

      - name: Validate iOS Debug Build
        run: |
          echo "üçé Validating iOS debug build..."
          flutter build ios --debug --no-codesign \
            --build-name="${{ needs.validate-pr.outputs.pr_version }}" \
            --build-number=99
          
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            app_size=$(du -sh build/ios/iphoneos/Runner.app | cut -f1)
            echo "‚úÖ iOS debug build successful: $app_size"
            echo "- **iOS Debug App:** $app_size" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå iOS debug build failed!"
            exit 1
          fi

      - name: Validate iOS Release Build
        run: |
          echo "üçé Validating iOS release build..."
          flutter build ios --release --no-codesign \
            --build-name="${{ needs.validate-pr.outputs.pr_version }}" \
            --build-number=99
          
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            app_size=$(du -sh build/ios/iphoneos/Runner.app | cut -f1)
            echo "‚úÖ iOS release build successful: $app_size"
            echo "- **iOS Release App:** $app_size" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå iOS release build failed!"
            exit 1
          fi

  # Final PR summary and status check
  pr-summary:
    needs: [validate-pr, test-and-quality, validate-android-build, validate-ios-build]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate PR Summary
        run: |
          echo "## üéØ Flutter PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã PR Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Number:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.validate-pr.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Branch:** ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Head Branch:** ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** ${{ needs.test-and-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage:** ${{ needs.test-and-quality.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-pr.outputs.should_build }}" = "true" ]; then
            echo "- **Android Build:** ${{ needs.validate-android-build.result == 'success' && '‚úÖ Passed' || needs.validate-android-build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **iOS Build:** ${{ needs.validate-ios-build.result == 'success' && '‚úÖ Passed' || needs.validate-ios-build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Builds:** ‚è≠Ô∏è Skipped (documentation-only changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status determination
          QUALITY_OK="${{ needs.test-and-quality.result == 'success' }}"
          BUILD_OK="true"
          
          if [ "${{ needs.validate-pr.outputs.should_build }}" = "true" ]; then
            ANDROID_OK="${{ needs.validate-android-build.result == 'success' }}"
            IOS_OK="${{ needs.validate-ios-build.result == 'success' }}"
            BUILD_OK=$([ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ] && echo "true" || echo "false")
          fi
          
          # Final verdict
          if [ "$QUALITY_OK" = "true" ] && [ "$BUILD_OK" = "true" ]; then
            COVERAGE="${{ needs.test-and-quality.outputs.coverage }}"
            if [ "${COVERAGE:-0}" = "0" ]; then
              echo "### ‚ö†Ô∏è Ready with Recommendations" >> $GITHUB_STEP_SUMMARY
              echo "All validation checks passed, but no unit tests were found. Consider adding tests for better code quality." >> $GITHUB_STEP_SUMMARY
            elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 70) ? 1 : 0}")" = "1" ]; then
              echo "### ‚úÖ Ready for Review" >> $GITHUB_STEP_SUMMARY
              echo "All validation checks passed with good test coverage (${COVERAGE}%). This PR is ready for review!" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚ö†Ô∏è Ready with Low Coverage" >> $GITHUB_STEP_SUMMARY
              echo "All validation checks passed, but test coverage is below 70% (${COVERAGE}%). Consider adding more tests." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ùå Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Some validation checks failed. Please review the errors above and fix them before requesting review." >> $GITHUB_STEP_SUMMARY
            
            # Provide specific guidance
            if [ "$QUALITY_OK" != "true" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Code Quality Issues:**" >> $GITHUB_STEP_SUMMARY
              echo "- Check the 'Code Analysis' and 'Code Formatting' steps above" >> $GITHUB_STEP_SUMMARY
              echo "- Run \`flutter analyze\` and \`dart format .\` locally" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$BUILD_OK" != "true" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Build Issues:**" >> $GITHUB_STEP_SUMMARY
              echo "- Check the build validation steps above for specific errors" >> $GITHUB_STEP_SUMMARY
              echo "- Test builds locally with \`flutter build apk\` and \`flutter build ios\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*PR validation completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      # Set job status based on results
      - name: Check Overall Status
        run: |
          QUALITY_OK="${{ needs.test-and-quality.result == 'success' }}"
          
          BUILD_OK="true"
          if [ "${{ needs.validate-pr.outputs.should_build }}" = "true" ]; then
            ANDROID_OK="${{ needs.validate-android-build.result == 'success' }}"
            IOS_OK="${{ needs.validate-ios-build.result == 'success' }}"
            BUILD_OK=$([ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ] && echo "true" || echo "false")
          fi
          
          if [ "$QUALITY_OK" = "true" ] && [ "$BUILD_OK" = "true" ]; then
            echo "‚úÖ All PR validation checks passed!"
            exit 0
          else
            echo "‚ùå PR validation failed - please fix the issues above"
            exit 1
          fi