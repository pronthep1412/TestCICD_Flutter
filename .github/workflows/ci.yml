# .github/workflows/ci.yml - Simplified Flutter Pull Request Testing
name: Flutter Pull Request Testing

on:
  pull_request:
    branches: [main, develop, staging]
    paths:
      - 'lib/**'
      - 'test/**'
      - 'android/**'
      - 'ios/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
      - '.github/workflows/**'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  # Single comprehensive testing job
  test-and-validate:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      should_build: ${{ steps.changes.outputs.should_build }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if builds needed
        id: changes
        run: |
          # Smart change detection
          if git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD | \
             grep -E '\.(dart|yaml|lock)$|android/|ios/' > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "📱 Code changes detected - builds will be triggered"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "📝 Documentation-only changes - builds skipped"
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      - name: Get Dependencies
        run: flutter pub get

      - name: Generate PR Version
        id: version
        run: |
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          PR_VERSION="$BASE_VERSION-pr.${{ github.event.number }}"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "📋 PR Version: $PR_VERSION"

      # Quality Checks
      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Code Analysis
        run: |
          echo "🔍 Running code analysis..."
          flutter analyze --no-congratulate

      - name: Code Formatting
        run: |
          echo "📝 Checking code formatting..."
          dart format --set-exit-if-changed .

      - name: Run Tests with Coverage
        run: |
          echo "🧪 Running tests..."
          flutter test --coverage --reporter=expanded

      - name: Calculate Coverage
        id: coverage
        run: |
          COVERAGE="0"
          if [ -f "coverage/lcov.info" ]; then
            sudo apt-get update && sudo apt-get install -y lcov
            COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | \
                      grep 'lines' | grep -o '[0-9.]*%' | head -1 | sed 's/%//' || echo "0")
          fi
          echo "percentage=${COVERAGE:-0}" >> $GITHUB_OUTPUT
          echo "📊 Test Coverage: ${COVERAGE:-0}%"

      # Test builds (only if needed)
      - name: Test Android Build
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "🔨 Testing Android build..."
          flutter build apk --debug --build-name="${{ steps.version.outputs.version }}" --build-number=99

      - name: Test iOS Build (Linux compatible)
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "🔨 Testing iOS build compatibility..."
          flutter build ios --debug --no-codesign --build-name="${{ steps.version.outputs.version }}" --build-number=99 || {
            echo "⚠️ iOS build test skipped on Linux - will be validated in platform-specific workflow"
          }

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: pr-coverage-${{ github.event.number }}
          path: coverage/
          retention-days: 7

      - name: PR Summary
        run: |
          echo "## 🚀 Flutter PR Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tests:** ${{ steps.changes.outputs.should_build == 'true' && '✅ Completed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          if [ "${COVERAGE:-0}" = "0" ]; then
            echo "⚠️ **No tests found** - Consider adding unit tests" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 70) ? 1 : 0}")" = "1" ]; then
            echo "✅ **Good coverage** - Above 70% threshold" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Low coverage** - Consider adding more tests" >> $GITHUB_STEP_SUMMARY
          fi

  # Platform-specific build validation (only when needed)
  validate-android:
    needs: test-and-validate
    if: needs.test-and-validate.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - run: flutter pub get
      - name: Build Android Release
        run: |
          echo "🤖 Validating Android release build..."
          flutter build appbundle --release --build-name="${{ needs.test-and-validate.outputs.pr_version }}" --build-number=99
          
          # Size check
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            size=$(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "📦 Android AAB Size: $size"
          fi

  validate-ios:
    needs: test-and-validate
    if: needs.test-and-validate.outputs.should_build == 'true'
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - run: flutter pub get
      - name: Install iOS Dependencies
        run: cd ios && pod install
      - name: Build iOS Release
        run: |
          echo "🍎 Validating iOS release build..."
          flutter build ios --release --no-codesign --build-name="${{ needs.test-and-validate.outputs.pr_version }}" --build-number=99
          
          # Size check
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            size=$(du -sh build/ios/iphoneos/Runner.app | cut -f1)
            echo "📦 iOS App Size: $size"
          fi

  # Final summary
  pr-summary:
    needs: [test-and-validate, validate-android, validate-ios]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Overall Summary
        run: |
          echo "## ✅ Flutter PR Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ needs.test-and-validate.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android:** ${{ needs.validate-android.result == 'success' && '✅ Passed' || needs.validate-android.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS:** ${{ needs.validate-ios.result == 'success' && '✅ Passed' || needs.validate-ios.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.test-and-validate.result }}" == "success" && 
                "${{ needs.validate-android.result }}" != "failure" && 
                "${{ needs.validate-ios.result }}" != "failure" ]]; then
            echo "🎉 **Status: Ready for Review**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status: Issues Found - Please fix before merging**" >> $GITHUB_STEP_SUMMARY
          fi