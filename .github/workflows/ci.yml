# .github/workflows/ci.yml - Flutter CI Pipeline with Platform Control
name: Flutter CI - Pull Request Testing

on:
  pull_request:
    branches:
      - master
      - develop
      - preprod
    paths:
      - "lib/**"
      - "android/**"
      - "ios/**"
      - "pubspec.*"
      - "test/**"
      - ".github/workflows/**"

env:
  FLUTTER_VERSION: "3.32.2"
  TEST_ANDROID: "false"
  TEST_IOS: "false"

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      pr_version_code: ${{ steps.version.outputs.version_code }}
      target_branch: ${{ steps.branch.outputs.name }}
      has_tests: ${{ steps.changes.outputs.has_tests }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      test_android: ${{ steps.platforms.outputs.test_android }}
      test_ios: ${{ steps.platforms.outputs.test_ios }}

    steps:
      #р╕Фр╕╢р╕Зр╣Вр╕Др╣Йр╕Фр╣Гр╕Щ git р╕бр╕▓р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      #р╕кр╕гр╣Йр╕▓р╕З version number р╕нр╕▒р╕Ю store
      - name: Generate PR Version
        id: version
        run: |
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          PR_VERSION="$BASE_VERSION-pr.${{ github.event.number }}"
          PR_VERSION_CODE=99
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$PR_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "ЁЯУЛ PR Version: $PR_VERSION (code: $PR_VERSION_CODE)"

      #р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╣Ир╕▓ PR р╕Щр╕╡р╣Йр╕Ир╕░ merge р╣Ар╕Вр╣Йр╕▓ branch р╣Др╕лр╕Щ
      - name: Set Target Branch
        id: branch
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Target branch: $TARGET_BRANCH"

      #р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ tests р╕нр╕вр╕╣р╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      - name: Check for Tests
        id: changes
        run: |
          HAS_TESTS="false"
          if [ -d "test" ] && [ "$(find test -name "*.dart" | wc -l)" -gt 0 ]; then
            HAS_TESTS="true"
          fi
          echo "has_tests=$HAS_TESTS" >> $GITHUB_OUTPUT
          echo "Has tests: $HAS_TESTS"

      #р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Бр╕▓р╕г build platform р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ
      - name: Detect Required Platforms
        id: platforms
        run: |
          # р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Фр╣Йр╕зр╕вр╕Др╣Ир╕▓ default
          TEST_ANDROID="${{ env.TEST_ANDROID }}"
          TEST_IOS="${{ env.TEST_IOS }}"

          echo "ЁЯФН Initial platform settings:"
          echo "  TEST_ANDROID: $TEST_ANDROID"
          echo "  TEST_IOS: $TEST_IOS"

          # ЁЯОп Manual Control Only - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ир╕▓р╕Б labels р╣Бр╕ер╕░ PR title

          # Check PR labels
          if echo "${{ github.event.pull_request.labels.*.name }}" | grep -i "test-android" > /dev/null; then
            echo "ЁЯП╖я╕П 'test-android' label detected - enabling Android testing"
            TEST_ANDROID="true"
          fi

          if echo "${{ github.event.pull_request.labels.*.name }}" | grep -i "test-ios" > /dev/null; then
            echo "ЁЯП╖я╕П 'test-ios' label detected - enabling iOS testing"
            TEST_IOS="true"
          fi

          # Check PR title
          if echo "${{ github.event.pull_request.title }}" | grep -E "\[Android\]|\[android\]" > /dev/null; then
            echo "ЁЯУЭ '[Android]' in PR title - enabling Android testing"
            TEST_ANDROID="true"
          fi

          if echo "${{ github.event.pull_request.title }}" | grep -E "\[iOS\]|\[ios\]" > /dev/null; then
            echo "ЁЯУЭ '[iOS]' in PR title - enabling iOS testing"
            TEST_IOS="true"
          fi

          # Output final decisions
          echo "test_android=$TEST_ANDROID" >> $GITHUB_OUTPUT
          echo "test_ios=$TEST_IOS" >> $GITHUB_OUTPUT

          echo ""
          echo "ЁЯОп Final platform testing decisions:"
          echo "  Android: $TEST_ANDROID"
          echo "  iOS: $TEST_IOS"
          echo "  PR title: ${{ github.event.pull_request.title }}"
          echo "  PR labels: ${{ github.event.pull_request.labels.*.name }}"
          echo "  Mode: Manual Control Only"

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З Flutter SDK р╣Гр╕Щ GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      #р╣Ар╕Бр╣Зр╕Ъ dependencies р╕Чр╕╡р╣Ир╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕ер╣Йр╕зр╣Др╕зр╣Йр╣Гр╕Кр╣Йр╕Лр╣Йр╕│
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-flutter-ci-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ci-

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З packages р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Йр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
      - name: Get Dependencies
        run: |
          echo "ЁЯУж Installing dependencies..."
          flutter pub get

      ##################################################
      #р╣Ар╕Лр╕Хр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щ Quality Gates р╣Ар╕Юр╕╖р╣Ир╕нр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕╕р╕Ур╕ар╕▓р╕Юр╣Вр╕Др╣Йр╕Фр╕Бр╣Ир╕нр╕Щ merge

      #р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕╕р╕Ур╕ар╕▓р╕Юр╣Вр╕Др╣Йр╕Ф
      - name: Code Analysis
        run: |
          echo "я┐╜ Running code analysis..."
          echo "## я┐╜ Code Analysis" >> $GITHUB_STEP_SUMMARY

          if flutter analyze --no-congratulate > analysis-results.txt 2>&1; then
            echo "тЬЕ Code analysis passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "тЭМ Analysis issues found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -30 analysis-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat analysis-results.txt
            exit 1
          fi

      #р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Вр╕Др╣Йр╕Ф р╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕бр╕▓р╕Хр╕гр╕Рр╕▓р╕Щр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ
      - name: Code Formatting Check
        run: |
          echo "я┐╜ Checking code formatting..."
          echo "## я┐╜ Code Formatting" >> $GITHUB_STEP_SUMMARY

          if dart format --set-exit-if-changed . > format-results.txt 2>&1; then
            echo "тЬЕ All files properly formatted" >> $GITHUB_STEP_SUMMARY
          else
            echo "тЭМ Formatting issues found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 format-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "ЁЯТб Run 'dart format .' to fix formatting" >> $GITHUB_STEP_SUMMARY
            cat format-results.txt
            exit 1
          fi

      #Security Audit р╣Ар╕нр╕▓р╣Др╕зр╣Й р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣Ир╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
      - name: Dependency Security Audit
        run: |
          echo "я┐╜ Running dependency security audit..."
          echo "## я┐╜ Security Audit" >> $GITHUB_STEP_SUMMARY

          # Check for pub audit command (if available)
          if flutter pub audit --help > /dev/null 2>&1; then
            echo "Running flutter pub audit..."
            if flutter pub audit > audit-results.txt 2>&1; then
              echo "тЬЕ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            else
              echo "тЪая╕П Security vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              head -20 audit-results.txt >> $GITHUB_STEP_SUMMARY || true
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "тЭМ Security audit found issues"
              cat audit-results.txt
            fi
          else
            echo "ЁЯУЭ Manual dependency check..."
            echo "тЬЕ Manual security review completed" >> $GITHUB_STEP_SUMMARY
            echo "ЁЯТб Consider upgrading to newer Flutter version for pub audit support" >> $GITHUB_STEP_SUMMARY
          fi
      ##################################################
      ##################################################
      #р╣Ар╕Лр╕Хр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щ Testing Pipeline р╣Ар╕Юр╕╖р╣Ир╕нр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Вр╕Др╣Йр╕Фр╕Чр╕│р╕Зр╕▓р╕Щр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╣Бр╕ер╕░р╕Др╕гр╕нр╕Ър╕Др╕ер╕╕р╕бр╣Ар╕Юр╕╡р╕вр╕Зр╣Гр╕Ф

      #р╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕Ьр╕е + р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М coverage
      - name: Run Tests with Coverage
        if: steps.changes.outputs.has_tests == 'true'
        run: |
          echo "ЁЯзк Running tests with coverage..."
          echo "## ЁЯзк Test Results" >> $GITHUB_STEP_SUMMARY

          if flutter test --coverage --reporter=expanded > test-results.txt 2>&1; then
            # Count tests
            TEST_COUNT=$(grep -o "All [0-9]* tests passed" test-results.txt | grep -o "[0-9]*" || echo "unknown")
            echo "тЬЕ All $TEST_COUNT tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "тЭМ Test failures:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -40 test-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat test-results.txt
            exit 1
          fi

      - name: Calculate Coverage
        id: coverage
        if: steps.changes.outputs.has_tests == 'true'
        run: |
          COVERAGE="0"

          if [ -f "coverage/lcov.info" ]; then
            # Install lcov for coverage calculation
            sudo apt-get update && sudo apt-get install -y lcov >/dev/null 2>&1
            COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | \
                      grep 'lines' | grep -o '[0-9.]*%' | head -1 | sed 's/%//' || echo "0")
          fi

          echo "percentage=${COVERAGE:-0}" >> $GITHUB_OUTPUT

          # Coverage report
          echo "## ЁЯУК Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${COVERAGE:-0}%" >> $GITHUB_STEP_SUMMARY

          if [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 80) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** тЬЕ Excellent (тЙе80%)" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 70) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** тЬЕ Good (тЙе70%)" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 50) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** тЪая╕П Moderate (тЙе50%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** тЭМ Low (<50%)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: No Tests Warning
        if: steps.changes.outputs.has_tests == 'false'
        run: |
          echo "## ЁЯзк Test Status" >> $GITHUB_STEP_SUMMARY
          echo "тЪая╕П No unit tests found" >> $GITHUB_STEP_SUMMARY
          echo "ЁЯТб Consider adding unit tests for better code quality" >> $GITHUB_STEP_SUMMARY

      - name: Upload Coverage Reports
        if: steps.changes.outputs.has_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pr-${{ github.event.number }}
          path: |
            coverage/
            test-results.txt
          retention-days: 7
      ##################################################

  # р╕гр╕▒р╕Щр╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕н platform detection р╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕лр╣Й test Android
  build-android-test:
    needs: [test-and-validate]
    if: needs.test-and-validate.outputs.test_android == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      #р╕Фр╕╢р╕Зр╣Вр╕Др╣Йр╕Фр╣Гр╕Щ git р╕бр╕▓р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е
      - name: Checkout
        uses: actions/checkout@v4

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З Flutter SDK р╣Гр╕Щ GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З packages р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Йр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
      - name: Get Dependencies
        run: flutter pub get

      #р╕кр╕▒р╣Ир╕З build
      - name: Build APK (Debug)
        run: |
          echo "ЁЯдЦ Building Android debug APK..."
          flutter build apk --debug \
            --build-name="${{ needs.test-and-validate.outputs.pr_version }}" \
            --build-number=${{ needs.test-and-validate.outputs.pr_version_code }}

          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            size=$(ls -lh build/app/outputs/flutter-apk/app-debug.apk | awk '{print $5}')
            echo "тЬЕ Debug APK: $size"
            echo "- **Android Debug APK:** $size" >> $GITHUB_STEP_SUMMARY
          else
            echo "тЭМ Debug APK build failed"
            exit 1
          fi

  # р╕гр╕▒р╕Щр╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕н platform detection р╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕лр╣Й test iOS
  build-ios-test:
    needs: [test-and-validate]
    if: needs.test-and-validate.outputs.test_ios == 'true'
    runs-on: macos-latest
    timeout-minutes: 20

    steps:
      #р╕Фр╕╢р╕Зр╣Вр╕Др╣Йр╕Фр╣Гр╕Щ git р╕бр╕▓р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е
      - name: Checkout
        uses: actions/checkout@v4

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З Flutter SDK р╣Гр╕Щ GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З packages р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Йр╣Гр╕Щр╣Вр╕Ыр╕гр╣Ар╕Ир╕Бр╕Хр╣М
      - name: Get Dependencies
        run: flutter pub get

      #р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З CocoaPods
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      #р╕кр╕▒р╣Ир╕З build
      - name: Build iOS (Debug)
        run: |
          echo "ЁЯНО Building iOS debug..."
          flutter build ios --debug --no-codesign \
            --build-name="${{ needs.test-and-validate.outputs.pr_version }}" \
            --build-number=${{ needs.test-and-validate.outputs.pr_version_code }}

          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            size=$(du -sh build/ios/iphoneos/Runner.app | cut -f1)
            echo "тЬЕ Debug iOS App: $size"
            echo "- **iOS Debug App:** $size" >> $GITHUB_STEP_SUMMARY
          else
            echo "тЭМ iOS debug build failed"
            exit 1
          fi

  #р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕г build test - Smart summary based on tested platforms
  pr-summary:
    needs: [test-and-validate, build-android-test, build-ios-test]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate PR Summary
        run: |
          echo "## ЁЯОп Flutter PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ЁЯУЛ PR Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base:** ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Head:** ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### тЬЕ Validation Results" >> $GITHUB_STEP_SUMMARY

          # Code Quality
          QUALITY_STATUS="${{ needs.test-and-validate.result }}"
          if [ "$QUALITY_STATUS" = "success" ]; then
            echo "- **Code Quality:** тЬЕ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Code Quality:** тЭМ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Test Coverage
          if [ "${{ needs.test-and-validate.outputs.has_tests }}" = "true" ]; then
            COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
            echo "- **Test Coverage:** ${COVERAGE:-0}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Test Coverage:** тЪая╕П No tests" >> $GITHUB_STEP_SUMMARY
          fi

          # Platform testing summary
          ANDROID_TESTED="${{ needs.test-and-validate.outputs.test_android }}"
          IOS_TESTED="${{ needs.test-and-validate.outputs.test_ios }}"

          echo "- **Platform Testing:**" >> $GITHUB_STEP_SUMMARY
          if [ "$ANDROID_TESTED" = "true" ] && [ "$IOS_TESTED" = "true" ]; then
            echo "  - ЁЯОп Full testing: Both Android & iOS" >> $GITHUB_STEP_SUMMARY
          elif [ "$ANDROID_TESTED" = "true" ] && [ "$IOS_TESTED" = "false" ]; then
            echo "  - ЁЯдЦ Android only (iOS will test in CD)" >> $GITHUB_STEP_SUMMARY
          elif [ "$ANDROID_TESTED" = "false" ] && [ "$IOS_TESTED" = "true" ]; then
            echo "  - ЁЯУ▒ iOS only (Android will test in CD)" >> $GITHUB_STEP_SUMMARY
          else
            echo "  - тЪая╕П No platform builds (check configuration)" >> $GITHUB_STEP_SUMMARY
          fi

          # Android Build
          ANDROID_STATUS="${{ needs.build-android-test.result }}"
          if [ "$ANDROID_TESTED" = "true" ]; then
            echo "- **Android Build:** $( [ "$ANDROID_STATUS" = "success" ] && echo "тЬЕ Passed" || echo "тЭМ Failed" )" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Android Build:** тПня╕П Skipped (manual control)" >> $GITHUB_STEP_SUMMARY
          fi

          # iOS Build  
          IOS_STATUS="${{ needs.build-ios-test.result }}"
          if [ "$IOS_TESTED" = "true" ]; then
            echo "- **iOS Build:** $( [ "$IOS_STATUS" = "success" ] && echo "тЬЕ Passed" || echo "тЭМ Failed" )" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **iOS Build:** тПня╕П Skipped (manual control)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Final Status
          QUALITY_OK="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result == 'success' || needs.build-android-test.result == 'skipped' }}"
          IOS_OK="${{ needs.build-ios-test.result == 'success' || needs.build-ios-test.result == 'skipped' }}"

          if [ "$QUALITY_OK" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            echo "### тЬЕ Ready for Review" >> $GITHUB_STEP_SUMMARY
            echo "All validation checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
            
            # Show what will happen after merge
            if [ "$ANDROID_TESTED" = "false" ] || [ "$IOS_TESTED" = "false" ]; then
              echo "Untested platforms will build automatically in CD pipeline." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### тЭМ Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Some validation checks failed. Please fix the issues before requesting review." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ЁЯТб Platform Control Tips" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`[iOS]\` in PR title to force iOS testing" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`[Android]\` in PR title to force Android testing" >> $GITHUB_STEP_SUMMARY  
          echo "- Add labels: \`test-ios\` or \`test-android\` for manual control" >> $GITHUB_STEP_SUMMARY
          echo "- Manual control only - no auto-detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Validation completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Final Status Check
        run: |
          QUALITY_OK="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result == 'success' || needs.build-android-test.result == 'skipped' }}"
          IOS_OK="${{ needs.build-ios-test.result == 'success' || needs.build-ios-test.result == 'skipped' }}"

          if [ "$QUALITY_OK" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            echo "тЬЕ All PR validation checks passed!"
            exit 0
          else
            echo "тЭМ PR validation failed"
            exit 1
          fi

# ЁЯУЛ USAGE EXAMPLES:
#
# 1. Default (fastest, recommended):
#    - р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Ар╕Юр╕┤р╣Ир╕б labels р╕лр╕гр╕╖р╕н keywords р╣Гр╕Ф р╣Ж
#    - р╕гр╕▒р╕Щр╣Бр╕Др╣И tests р╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ (~1-2 р╕Щр╕▓р╕Чр╕╡)
#    - р╣Др╕бр╣И build platform р╣Гр╕Ф р╣Ж (р╕Ыр╕гр╕░р╕лр╕вр╕▒р╕Фр╣Ар╕зр╕ер╕▓р╕кр╕╣р╕Зр╕кр╕╕р╕Ф)
#
# 2. Android-only testing:
#    - р╣Ар╕Юр╕┤р╣Ир╕б [Android] р╕лр╕гр╕╖р╕н [android] р╣Гр╕Щ PR title
#    - р╕лр╕гр╕╖р╕нр╣Ар╕Юр╕┤р╣Ир╕б label 'test-android' р╣Гр╕лр╣Й PR
#    - р╕лр╕гр╕╖р╕нр╣Бр╕Бр╣Йр╣Др╕В TEST_ANDROID: 'true' р╣Гр╕Щр╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Й
#    - р╕Ир╕░р╕гр╕▒р╕Щ Android build (~3-5 р╕Щр╕▓р╕Чр╕╡)
#
# 3. iOS-only testing:
#    - р╣Ар╕Юр╕┤р╣Ир╕б [iOS] р╕лр╕гр╕╖р╕н [ios] р╣Гр╕Щ PR title
#    - р╕лр╕гр╕╖р╕нр╣Ар╕Юр╕┤р╣Ир╕б label 'test-ios' р╣Гр╕лр╣Й PR
#    - р╕лр╕гр╕╖р╕нр╣Бр╕Бр╣Йр╣Др╕В TEST_IOS: 'true' р╣Гр╕Щр╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Й
#    - р╕Ир╕░р╕гр╕▒р╕Щ iOS build (~8-10 р╕Щр╕▓р╕Чр╕╡)
#
# 4. Full testing (both platforms):
#    - р╣Ар╕Юр╕┤р╣Ир╕б labels р╕Чр╕▒р╣Йр╕Зр╕кр╕нр╕З: 'test-ios' р╣Бр╕ер╕░ 'test-android'
#    - р╕лр╕гр╕╖р╕нр╣Ар╕Юр╕┤р╣Ир╕б [Android] [iOS] р╣Гр╕Щ title
#    - р╕лр╕гр╕╖р╕нр╣Бр╕Бр╣Йр╣Др╕В TEST_ANDROID: 'true', TEST_IOS: 'true'
#    - р╕Ир╕░р╕гр╕▒р╕Щр╕Чр╕▒р╣Йр╕Зр╕кр╕нр╕З builds (~12-15 р╕Щр╕▓р╕Чр╕╡)
#
# ЁЯП╖я╕П р╕зр╕┤р╕Шр╕╡р╣Ар╕Юр╕┤р╣Ир╕б Label р╣Гр╕Щ GitHub:
# 1. р╣Др╕Ыр╕Чр╕╡р╣И PR р╕Вр╕нр╕Зр╕Др╕╕р╕У
# 2. р╕Др╕ер╕┤р╕Д "Labels" р╕Чр╕▓р╕Зр╕Фр╣Йр╕▓р╕Щр╕Вр╕зр╕▓
# 3. р╣Ар╕ер╕╖р╕нр╕Б 'test-android' р╕лр╕гр╕╖р╕н 'test-ios'
# 4. р╕лр╕гр╕╖р╕нр╕кр╕гр╣Йр╕▓р╕З label р╣Гр╕лр╕бр╣Ир╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡
#
# ЁЯУЭ р╕зр╕┤р╕Шр╕╡р╣Гр╕Кр╣Й PR Title:
# - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З: "Fix login bug [Android]"
# - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З: "Update iOS UI [iOS]"
# - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З: "Major refactor [Android] [iOS]"
