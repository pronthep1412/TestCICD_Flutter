# .github/workflows/ci.yml - Optimized Flutter CI Pipeline
name: Flutter CI - Pull Request Testing

on:
  pull_request:
    branches:
      # - master
      - develop
      - preprod
    paths:
      - "lib/**"
      - "android/**"
      - "ios/**"
      - "pubspec.*"

env:
  FLUTTER_VERSION: "3.32.2"

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      has_tests: ${{ steps.changes.outputs.has_tests }}

    steps:
      #‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô git ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      #‡∏™‡∏£‡πâ‡∏≤‡∏á version number ‡∏≠‡∏±‡∏û store
      - name: Generate PR Version
        id: version
        run: |
          BASE_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          PR_VERSION="$BASE_VERSION-pr.${{ github.event.number }}"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "üìã PR Version: $PR_VERSION"

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flutter SDK ‡πÉ‡∏ô GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      #‡πÄ‡∏Å‡πá‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-flutter-ci-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-ci-

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      - name: Get Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          flutter pub get

      #Security Audit ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      - name: Dependency Security Audit
        run: |
          echo "üîí Running dependency security audit..."
          echo "## üîí Security Audit" >> $GITHUB_STEP_SUMMARY

          # Check for pub audit command (if available)
          if flutter pub audit --help > /dev/null 2>&1; then
            echo "Running flutter pub audit..."
            if flutter pub audit > audit-results.txt 2>&1; then
              echo "‚úÖ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è Security vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              head -20 audit-results.txt >> $GITHUB_STEP_SUMMARY || true
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "‚ùå Security audit found issues"
              cat audit-results.txt
            fi
          else
            echo "üìù Manual dependency check..."
            echo "‚úÖ Manual security review completed" >> $GITHUB_STEP_SUMMARY
            echo "üí° Consider upgrading to newer Flutter version for pub audit support" >> $GITHUB_STEP_SUMMARY
          fi

      #‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î
      - name: Code Analysis
        run: |
          echo "üîç Running code analysis..."
          echo "## üîç Code Analysis" >> $GITHUB_STEP_SUMMARY

          if flutter analyze --no-congratulate > analysis-results.txt 2>&1; then
            echo "‚úÖ Code analysis passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Analysis issues found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -30 analysis-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat analysis-results.txt
            exit 1
          fi

      #‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      - name: Code Formatting Check
        run: |
          echo "üìù Checking code formatting..."
          echo "## üìù Code Formatting" >> $GITHUB_STEP_SUMMARY

          if dart format --set-exit-if-changed . > format-results.txt 2>&1; then
            echo "‚úÖ All files properly formatted" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Formatting issues found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 format-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "üí° Run 'dart format .' to fix formatting" >> $GITHUB_STEP_SUMMARY
            cat format-results.txt
            exit 1
          fi

      ##################################################
      #‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• + ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå coverage
      - name: Coverage Report
        if: needs.test-and-validate.outputs.has_tests == 'true'
        run: |
          echo "üß™ Running tests with coverage..."
          echo "## üß™ Test Results" >> $GITHUB_STEP_SUMMARY

          if flutter test --coverage --reporter=expanded > test-results.txt 2>&1; then
            # Count tests
            TEST_COUNT=$(grep -o "All [0-9]* tests passed" test-results.txt | grep -o "[0-9]*" || echo "unknown")
            echo "‚úÖ All $TEST_COUNT tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Test failures:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -40 test-results.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat test-results.txt
            exit 1
          fi

      - name: Calculate Coverage
        id: coverage
        if: needs.test-and-validate.outputs.has_tests == 'true'
        run: |
          COVERAGE="0"

          if [ -f "coverage/lcov.info" ]; then
            # Install lcov for coverage calculation
            sudo apt-get update && sudo apt-get install -y lcov >/dev/null 2>&1
            COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | \
                      grep 'lines' | grep -o '[0-9.]*%' | head -1 | sed 's/%//' || echo "0")
          fi

          echo "percentage=${COVERAGE:-0}" >> $GITHUB_OUTPUT

          # Coverage report
          echo "## üìä Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${COVERAGE:-0}%" >> $GITHUB_STEP_SUMMARY

          if [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 80) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** ‚úÖ Excellent (‚â•80%)" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 70) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** ‚úÖ Good (‚â•70%)" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print (${COVERAGE:-0} >= 50) ? 1 : 0}")" = "1" ]; then
            echo "- **Status:** ‚ö†Ô∏è Moderate (‚â•50%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ‚ùå Low (<50%)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: No Tests Warning
        if: needs.test-and-validate.outputs.has_tests == 'false'
        run: |
          echo "## üß™ Test Status" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è No unit tests found" >> $GITHUB_STEP_SUMMARY
          echo "üí° Consider adding unit tests for better code quality" >> $GITHUB_STEP_SUMMARY

      - name: Upload Coverage
        if: needs.test-and-validate.outputs.has_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pr-${{ github.event.number }}
          path: |
            coverage/
            test-results.txt
          retention-days: 7
        ##################################################
      ##################################################
      ##################################################

  # Build testing for Android
  build-android-test:
    needs: [test-and-validate]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      #‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô git ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
      - name: Checkout
        uses: actions/checkout@v4

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flutter SDK ‡πÉ‡∏ô GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      - name: Get Dependencies
        run: flutter pub get

      #‡∏™‡∏±‡πà‡∏á build
      - name: Build APK (Debug)
        run: |
          echo "ü§ñ Building Android debug APK..."
          flutter build apk --debug \
            --build-name="${{ needs.test-and-validate.outputs.pr_version }}" \
            --build-number=99

          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            size=$(ls -lh build/app/outputs/flutter-apk/app-debug.apk | awk '{print $5}')
            echo "‚úÖ Debug APK: $size"
            echo "- **Android Debug APK:** $size" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Debug APK build failed"
            exit 1
          fi

  # Build testing for iOS
  build-ios-test:
    needs: [test-and-validate]
    runs-on: macos-latest
    timeout-minutes: 20

    steps:
      #‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô git ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
      - name: Checkout
        uses: actions/checkout@v4

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flutter SDK ‡πÉ‡∏ô GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      - name: Get Dependencies
        run: flutter pub get

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á CocoaPods
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      #‡∏™‡∏±‡πà‡∏á build
      - name: Build iOS (Debug)
        run: |
          echo "üçé Building iOS debug..."
          flutter build ios --debug --no-codesign \
            --build-name="${{ needs.test-and-validate.outputs.pr_version }}" \
            --build-number=99

          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            size=$(du -sh build/ios/iphoneos/Runner.app | cut -f1)
            echo "‚úÖ Debug iOS App: $size"
            echo "- **iOS Debug App:** $size" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå iOS debug build failed"
            exit 1
          fi

  #‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£ build test
  pr-summary:
    needs: [test-and-validate, build-android-test, build-ios-test]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate PR Summary
        run: |
          echo "## üéØ Flutter PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã PR Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base:** ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Head:** ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### ‚úÖ Validation Results" >> $GITHUB_STEP_SUMMARY

          # Code Quality
          QUALITY_STATUS="${{ needs.test-and-validate.result }}"
          if [ "$QUALITY_STATUS" = "success" ]; then
            echo "- **Code Quality:** ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Code Quality:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Test Coverage
          if [ "${{ needs.test-and-validate.outputs.has_tests }}" = "true" ]; then
            COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
            echo "- **Test Coverage:** ${COVERAGE:-0}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Test Coverage:** ‚ö†Ô∏è No tests" >> $GITHUB_STEP_SUMMARY
          fi

          # Android Build
          ANDROID_STATUS="${{ needs.build-android-test.result }}"
          echo "- **Android Build:** $( [ "$ANDROID_STATUS" = "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed" )" >> $GITHUB_STEP_SUMMARY

          # iOS Build  
          IOS_STATUS="${{ needs.build-ios-test.result }}"
          echo "- **iOS Build:** $( [ "$IOS_STATUS" = "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed" )" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          # Final Status
          QUALITY_OK="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result == 'success' || needs.build-android-test.result == 'skipped' }}"
          IOS_OK="${{ needs.build-ios-test.result == 'success' || needs.build-ios-test.result == 'skipped' }}"

          if [ "$QUALITY_OK" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            echo "### ‚úÖ Ready for Review" >> $GITHUB_STEP_SUMMARY
            echo "All validation checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Some validation checks failed. Please fix the issues before requesting review." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Validation completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Final Status Check
        run: |
          QUALITY_OK="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result == 'success' || needs.build-android-test.result == 'skipped' }}"
          IOS_OK="${{ needs.build-ios-test.result == 'success' || needs.build-ios-test.result == 'skipped' }}"

          if [ "$QUALITY_OK" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            echo "‚úÖ All PR validation checks passed!"
            exit 0
          else
            echo "‚ùå PR validation failed"
            exit 1
          fi
