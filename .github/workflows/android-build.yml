# .github/workflows/android-reusable.yml - FIXED & SIMPLIFIED
name: Android Build & Deploy

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: 'development'
    secrets:
      KEYSTORE_FILE:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true
      GOOGLE_PLAY_JSON_KEY:
        required: true
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.2.3)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (e.g., 123)'
        required: true
        default: '1'
      branch:
        description: 'Branch name'
        required: true
        default: 'develop'
      environment:
        description: 'Environment'
        required: false
        default: 'development'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  build-and-deploy-android:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      #‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô git ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 
      - name: Checkout
        uses: actions/checkout@v4

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flutter SDK ‡πÉ‡∏ô GitHub runner
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      #‡πÄ‡∏Å‡πá‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      - name: Get Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          flutter pub get

      #‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏•‡∏Ç‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
      - name: Update Version
        run: |
          echo "üìù Updating version to: ${{ inputs.version }}+${{ inputs.version_code }}"
          sed -i "s/^version: .*/version: ${{ inputs.version }}+${{ inputs.version_code }}/" pubspec.yaml
          grep "^version:" pubspec.yaml

      #‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡πà‡∏≤ Keystore
      - name: Setup Android Keystore
        run: |
          echo "üîë Setting up Android keystore..."
          
          # Create keystore from base64
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/key.jks
          
          # Verify keystore exists
          if [ ! -f "android/app/key.jks" ]; then
            echo "‚ùå Failed to create keystore"
            exit 1
          fi
          
          # Create key.properties
          cat > android/key.properties << EOF
          storeFile=key.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
          echo "‚úÖ Keystore setup completed"
          ls -la android/app/key.jks

      #‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå aab
      - name: Build Android AAB
        run: |
          echo "üî® Building Android App Bundle..."
          
          flutter build appbundle --release \
            --build-name="${{ inputs.version }}" \
            --build-number="${{ inputs.version_code }}"
          
          # Simple verification
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "‚úÖ AAB built successfully"
            ls -lh build/app/outputs/bundle/release/app-release.aab
          else
            echo "‚ùå AAB build failed"
            exit 1
          fi

      #‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Ruby environment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Fastlane
      - name: Setup Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android

      #‡∏≠‡∏±‡∏û‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏∂‡πâ‡∏ô Google Play
      - name: Deploy to Google Play
        run: |
          echo "üöÄ Deploying to Google Play..."
          
          # üîç DEBUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AAB file
          echo "üîç Searching for AAB files..."
          find . -name "*.aab" -type f
          find . -path "*/outputs/bundle/*" -type f
          
          # Check expected location
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "‚úÖ AAB found at expected location"
            ls -lh build/app/outputs/bundle/release/app-release.aab
          else
            echo "‚ùå AAB not found at expected location"
            echo "üìÇ Checking build directory structure..."
            ls -la build/ || echo "No build directory"
            ls -la build/app/ || echo "No build/app directory"  
            ls -la build/app/outputs/ || echo "No outputs directory"
          fi
          
          # Setup Google Play credentials
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" | base64 -d > android/google-play-key.json
          
          # Determine track and deployment lane
          case "${{ inputs.branch }}" in
            "master") 
              TRACK="production"
              LANE="deploy_master"
              ;;
            "preprod") 
              TRACK="alpha"
              LANE="deploy_preprod"
              ;;
            *) 
              TRACK="internal"
              LANE="deploy_develop"
              ;;
          esac
          
          echo "üì§ Deploying to track: $TRACK"
          echo "üéØ Using lane: $LANE"
          
          # Deploy with Fastlane (only if AAB exists)
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            cd android
            bundle exec fastlane $LANE
            echo "‚úÖ Deployment completed!"
          else
            echo "‚ùå Cannot deploy: AAB file missing"
            exit 1
          fi

      #‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå build results ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô GitHub ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö download ‡∏´‡∏£‡∏∑‡∏≠ debug
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ inputs.version }}-${{ github.run_number }}
          path: |
            build/app/outputs/bundle/release/*.aab
            android/fastlane/logs/
          retention-days: 30

      #‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ build 
      - name: Build Summary
        run: |
          echo "## ü§ñ Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            size=$(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "- **AAB Size:** $size" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY

      #‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å build/deploy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      - name: Cleanup
        if: always()
        run: |
          rm -f android/app/key.jks
          rm -f android/key.properties  
          rm -f android/google-play-key.json