# .github/workflows/android-reusable.yml - Reusable Android Workflow
name: Android Build & Deploy

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      is_production:
        required: false
        type: string
        default: 'false'
    secrets:
      KEYSTORE_FILE:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true
      GOOGLE_PLAY_JSON_KEY:
        required: true
  
  # Manual trigger (ใช้สำหรับ hotfix หรือ emergency deploy)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.2.3)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (e.g., 123)'
        required: true
        default: '1'
      branch:
        description: 'Branch name'
        required: true
        default: 'develop'

env:
  FLUTTER_VERSION: '3.32.2'

jobs:
  build-and-deploy-android:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    environment: 
      name: ${{ inputs.branch == 'main' && 'production' || inputs.branch }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Dependencies
        run: flutter pub get

      - name: Update Version
        run: |
          sed -i "s/^version: .*/version: ${{ inputs.version }}+${{ inputs.version_code }}/" pubspec.yaml

      - name: Setup Android Signing
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks
          cat > android/key.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

      - name: Build Android AAB
        run: |
          flutter build appbundle --release \
            --build-name="${{ inputs.version }}" \
            --build-number="${{ inputs.version_code }}"

      - name: Deploy to Google Play
        run: |
          cd android
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" | base64 -d > google-play-key.json
          
          TRACK="internal"
          case "${{ inputs.branch }}" in
            "main") TRACK="production" ;;
            "staging") TRACK="beta" ;;
          esac
          
          bundle exec fastlane android deploy \
            track:$TRACK \
            aab:"../build/app/outputs/bundle/release/app-release.aab" \
            json_key:"google-play-key.json"

      - name: Cleanup
        if: always()
        run: |
          rm -f android/app/keystore.jks
          rm -f android/key.properties
          rm -f android/google-play-key.json