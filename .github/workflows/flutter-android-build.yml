# .github/workflows/flutter-android-build.yml - Flutter Android DEPLOY ONLY (FIXED)
name: "Flutter Android Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      build_artifacts:
        description: 'Pre-built Flutter build artifacts name (REQUIRED)'
        required: true
        type: string
    secrets:
      GOOGLE_PLAY_JSON_KEY:
        required: true
      KEYSTORE_FILE:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true

jobs:
  deploy-android:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Much faster now - deploy only
    
    environment: 
      name: ${{ inputs.branch == 'master' && 'production' || inputs.branch }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 📥 Download pre-built artifacts (REQUIRED)
      - name: Download Pre-built Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build_artifacts }}
          path: ./artifacts/

      - name: Setup Pre-built Artifacts
        run: |
          echo "📦 Setting up pre-built Android artifacts..."
          echo "📋 Artifact name: ${{ inputs.build_artifacts }}"
          
          # Create necessary directories
          mkdir -p build/app/outputs/bundle/release/
          mkdir -p build/app/outputs/flutter-apk/
          
          # Verify and copy artifacts
          if [ -f "./artifacts/app-release.aab" ]; then
            cp ./artifacts/app-release.aab build/app/outputs/bundle/release/
            aab_size=$(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "✅ Pre-built AAB ready: $aab_size"
          else
            echo "❌ Required AAB not found in artifacts!"
            ls -la ./artifacts/
            exit 1
          fi
          
          if [ -f "./artifacts/app-release.apk" ]; then
            cp ./artifacts/app-release.apk build/app/outputs/flutter-apk/
            apk_size=$(ls -lh build/app/outputs/flutter-apk/app-release.apk | awk '{print $5}')
            echo "✅ Pre-built APK ready: $apk_size"
          fi
          
          echo "🎯 Ready for deployment - no build required!"

      # 🔄 Setup Ruby for Fastlane
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android

      # 🔒 Setup Android signing
      - name: Setup Android Signing
        run: |
          echo "🔑 Setting up Android signing..."
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks
          
          # Verify keystore
          if [ -f "android/app/keystore.jks" ]; then
            keystore_size=$(ls -lh android/app/keystore.jks | awk '{print $5}')
            echo "✅ Keystore ready: $keystore_size"
          else
            echo "❌ Keystore creation failed!"
            exit 1
          fi
          
          # Create key.properties
          cat > android/key.properties << EOF
          storeFile=app/keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
          echo "✅ Android signing configured"

      # 🚀 Deploy to Google Play Store
      - name: Deploy to Google Play Store
        if: inputs.publish == true
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          BUILD_VERSION: ${{ inputs.version }}
          BUILD_VERSION_CODE: ${{ inputs.version_code }}
        run: |
          cd android
          echo "🚀 Deploying to Google Play Store..."
          
          # Setup Play Store credentials
          echo "$GOOGLE_PLAY_JSON_KEY" | base64 -d > google-play-key.json
          
          # Verify AAB exists for deployment
          AAB_PATH="../build/app/outputs/bundle/release/app-release.aab"
          if [ ! -f "$AAB_PATH" ]; then
            echo "❌ AAB not found for deployment!"
            exit 1
          fi
          
          aab_size=$(ls -lh "$AAB_PATH" | awk '{print $5}')
          echo "✅ Deploying AAB: $aab_size"
          
          # Determine deployment track
          TRACK="internal"
          case "${{ inputs.branch }}" in
            "master") TRACK="production" ;;
            "preprod") TRACK="alpha" ;;
            *) TRACK="internal" ;;
          esac
          
          echo "📤 Deploying to track: $TRACK"
          
          # Deploy using Fastlane
          if bundle exec fastlane deploy_${{ inputs.branch }}; then
            echo "✅ Deployment to $TRACK completed successfully"
          else
            echo "❌ Deployment failed"
            # Show logs for debugging
            if [ -d "fastlane/logs" ]; then
              echo "📄 Recent fastlane logs:"
              find fastlane/logs -name "*.log" -type f -exec tail -20 {} \;
            fi
            exit 1
          fi
          
          # Cleanup
          rm -f google-play-key.json

      # 📁 Upload artifacts if not deploying
      - name: Upload Build Artifacts
        if: inputs.publish == false
        uses: actions/upload-artifact@v4
        with:
          name: flutter-android-${{ inputs.environment }}-${{ inputs.version }}-${{ github.run_number }}
          path: |
            build/app/outputs/bundle/release/*.aab
            build/app/outputs/flutter-apk/*.apk
            android/fastlane/logs/*.log
          retention-days: 7

      # 📊 Deployment summary
      - name: Generate Deployment Summary
        if: always()
        run: |
          echo "## 🤖 Flutter Android Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Used Pre-built Artifacts:** ✅ Yes" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Required:** ❌ No (Deploy Only)" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [ "${{ job.status }}" = "success" ]; then
            echo "- **Deployment Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Deployment Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # File sizes
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            aab_size=$(ls -lh build/app/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "- **AAB Size:** $aab_size" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            apk_size=$(ls -lh build/app/outputs/flutter-apk/app-release.apk | awk '{print $5}')
            echo "- **APK Size:** $apk_size" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment track
          if [ "${{ inputs.publish }}" = "true" ]; then
            TRACK="internal"
            case "${{ inputs.branch }}" in
              "master") TRACK="production" ;;
              "preprod") TRACK="alpha" ;;
            esac
            echo "- **Deployed to:** $TRACK track" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Artifacts:** Available for download" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Android deployment completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      # 🧹 Cleanup
      - name: Cleanup Sensitive Files
        if: always()
        run: |
          rm -f android/app/keystore.jks
          rm -f android/key.properties
          rm -f android/google-play-key.json
          echo "✅ Sensitive files cleaned up"